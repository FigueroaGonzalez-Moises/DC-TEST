{"version":3,"sources":["../node_modules/nanoid/index.browser.js","components/FAQ.tsx"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","FAQ","bubbles","i","push","className","style","Math","random","textAlign","map","_val","position","top","in","mode","values","result"],"mappings":"gJAiCA,IA2CIA,EAAS,WAKX,IAL0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAG3CA,KAAQ,CAMb,IAAIM,EAAqB,GAAdJ,EAAMF,GAGfC,GAFEK,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,I,mGClCMQ,UA/DH,WAGR,IAFA,IAAMC,EAAiB,GAEdC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAAC,IAAD,EACxBD,EAAQE,KACJ,qBAEIC,UAAU,SACVC,OAAK,mBAEI,SAFJ,UAEkB,EAAoB,EAAhBC,KAAKC,SAF3B,sBAGI,aAHJ,UAGsB,EAAoB,EAAhBD,KAAKC,SAH/B,sBAII,aAJJ,UAI2C,IAAhBD,KAAKC,SAAT,EAJvB,oBAKI,SALJ,UAKkB,EAAoB,EAAhBD,KAAKC,SAL3B,oBAMI,UANJ,WAMoB,GAAK,EAAoB,EAAhBD,KAAKC,UANlC,UAFAjB,gBAejB,OACI,sBAAKc,UAAU,kBAAf,UACI,qBAAKA,UAAU,OAAf,SACI,oBAAIC,MAAO,CAAEG,UAAW,UAAxB,mBAEJ,qBAAKJ,UAAU,gBAAf,SACI,qBAAKA,UAAU,UAAf,SACKH,EAAQQ,KAAI,SAACC,EAAMR,GAChB,OAAO,8BAAqBD,EAAQC,IAAnBZ,sBAI7B,sBAAKc,UAAU,UAAf,UACI,wBACA,2BAEJ,qBAAKC,MAAO,CAAEM,SAAU,QAASC,IAAK,SAAtC,SACI,+BACI,wBAAQpB,GAAG,OAAX,SAMI,+BACIqB,GAAG,OACHC,KAAK,SACLC,OAAO,+CACPC,OAAO","file":"static/js/5.3a573149.chunk.js","sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import \"css/faq.scss\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst FAQ = () => {\r\n    const bubbles: any[] = [];\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n        bubbles.push(\r\n            <div\r\n                key={nanoid()}\r\n                className='bubble'\r\n                style={\r\n                    {\r\n                        [\"--size\"]: `${2 + Math.random() * 4}rem`,\r\n                        [\"--distance\"]: `${6 + Math.random() * 4}rem`,\r\n                        [\"--position\"]: `${-5 + Math.random() * 110}%`,\r\n                        [\"--time\"]: `${4 + Math.random() * 2}s`,\r\n                        [\"--delay\"]: `${-1 * (2 + Math.random() * 2)}s`,\r\n                    } as any\r\n                }\r\n            ></div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='faq-pageWrapper'>\r\n            <div className='main'>\r\n                <h1 style={{ textAlign: \"center\" }}>FAQ</h1>\r\n            </div>\r\n            <div className='faq-container'>\r\n                <div className='bubbles'>\r\n                    {bubbles.map((_val, i) => {\r\n                        return <div key={nanoid()}>{bubbles[i]}</div>;\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='content'>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n            <svg style={{ position: \"fixed\", top: \"100vh\" }}>\r\n                <defs>\r\n                    <filter id='blob'>\r\n                        {/* <feGaussianBlur\r\n                            in='SourceGraphic'\r\n                            stdDeviation='10'\r\n                            result='blur'\r\n                        ></feGaussianBlur> */}\r\n                        <feColorMatrix\r\n                            in='blur'\r\n                            mode='matrix'\r\n                            values='1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9'\r\n                            result='blob'\r\n                        ></feColorMatrix>\r\n                        {/* <feComposite\r\n                            in='SourceGraphic'\r\n                            in2='blob'\r\n                            operator='atop'\r\n                        ></feComposite> */}\r\n                    </filter>\r\n                </defs>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FAQ;\r\n"],"sourceRoot":""}