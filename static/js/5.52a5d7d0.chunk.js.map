{"version":3,"sources":["../node_modules/nanoid/index.browser.js","components/mobileNavbar/SectionsForNav.tsx","components/mobileNavbar/Sections.tsx"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","SectionsForNav","useGetSectionsQuery","data","loading","error","style","sectionsStyles","sectionLinkStyles","href","opacity","getSections","map","section","i","name","section_id","length","display","placeItems","height","paddingBottom","backgroundColor","boxShadow","fontWeight","color","Sections","uri","window","location","Number","split","section_name","slice","lastIndexOf","indexOf","useGetSectionsProductsQuery","variables","to","className","textAlign","getSectionsProducts","product","product_id","src","images","img_url","alt","marginBottom","price","toFixed"],"mappings":"gJAiCA,IA2CIA,EAAS,WAKX,IAL0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAG3CA,KAAQ,CAMb,IAAIM,EAAqB,GAAdJ,EAAMF,GAGfC,GAFEK,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,I,2GCjGIQ,EAAiB,WAC1B,MAAiCC,cAAzBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAEvB,OAAID,IAAYD,GAAQE,EAAc,6BAGlC,qBAAKC,MAAOC,EAAZ,SACI,iCACI,oBAAGD,MAAOE,EAAmBC,KAAK,aAAlC,iBACQ,sBAAMH,MAAO,CAAEI,QAAS,IAAxB,kBAEPP,EAAKQ,YAAYC,KAAI,SAACC,EAASC,GAI5B,OACI,oBAEIR,MAAOE,EACPC,KAAI,oBAAeI,EAAQE,KAAvB,YAA+BF,EAAQG,YAH/C,UAKK,IACAH,EAAQE,KAAM,IACdD,IAAMX,EAAKQ,YAAYM,OAAS,EAC7B,sBAAMX,MAAO,CAAEI,QAAS,IAAxB,eACA,OARCnB,wBAiB3BgB,EAAiB,CACnBW,QAAS,OACTC,WAAY,SACZC,OAAQ,OACRC,cAAe,MACfC,gBAAiB,QACjBC,UACI,qGAGFf,EAAyB,CAC3BgB,WAAY,OACZC,MAAO,SCqBIC,UAhEE,WACb,IAAMC,EAAMC,OAAOC,SAASpB,KACtBO,EAAac,OAAOH,EAAII,MAAM,KAAK,IACnCC,EAAeL,EAAIM,MAAMN,EAAIO,YAAY,KAAO,EAAGP,EAAIQ,QAAQ,MAErE,EAAiCC,YAA4B,CACzDC,UAAW,CACPrB,gBAFAb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAMvB,OAAID,EAAgB,6BAEhBC,IAAUF,EACH,cAAC,IAAD,CAAUmC,GAAG,OAIpB,qCACI,cAAC,EAAD,IAEA,sBAAKC,UAAU,YAAf,UACI,oBACIjC,MAAO,CACHkC,UAAW,UAFnB,SAKKR,IAGL,qBAAKO,UAAU,gBAAf,SACKpC,EAAKsC,oBAAoB7B,KAAI,SAAA8B,GAC1B,OACI,qBAAKH,UAAU,OAAf,SACI,oBAAG9B,KAAI,oBAAeiC,EAAQC,YAA9B,UACI,qBAAKJ,UAAU,aAAf,SACI,qBACIK,IAAG,UACCF,EAAQG,OAAQ,GAAGC,SAAW,IAElCC,IAAKL,EAAQ3B,SAGrB,sBAAKwB,UAAU,eAAf,UACI,oBAAIjC,MAAO,CAAE0C,aAAc,OAA3B,SACKN,EAAQ3B,OAEb,kCAEKe,OACGY,EAAQO,MAAQ,KAClBC,QAAQ,aAlBC3D","file":"static/js/5.52a5d7d0.chunk.js","sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useGetSectionsQuery } from \"generated/graphql\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport const SectionsForNav = () => {\r\n    const { data, loading, error } = useGetSectionsQuery();\r\n\r\n    if (loading || !data || error) return <></>;\r\n\r\n    return (\r\n        <div style={sectionsStyles}>\r\n            <span>\r\n                <a style={sectionLinkStyles} href='#/products'>\r\n                    All <span style={{ opacity: 0.5 }}>|</span>\r\n                </a>\r\n                {data.getSections.map((section, i) => {\r\n                    // section name is added for url readability\r\n                    // section is queried by section_id; ? is added as an identifier for window.href.split\r\n\r\n                    return (\r\n                        <a\r\n                            key={nanoid()}\r\n                            style={sectionLinkStyles}\r\n                            href={`#/section/${section.name}?${section.section_id}`}\r\n                        >\r\n                            {\" \"}\r\n                            {section.name}{\" \"}\r\n                            {i !== data.getSections.length - 1 ? (\r\n                                <span style={{ opacity: 0.5 }}>|</span>\r\n                            ) : null}\r\n                        </a>\r\n                    );\r\n                })}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst sectionsStyles = {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    height: \"20px\",\r\n    paddingBottom: \"2px\",\r\n    backgroundColor: \"white\",\r\n    boxShadow:\r\n        \"0 24px 38px 3px rgba(0,0,0,0.14),0 9px 46px 8px rgba(0,0,0,0.12),0 11px 15px -7px rgba(0,0,0,0.2)\",\r\n};\r\n\r\nconst sectionLinkStyles: any = {\r\n    fontWeight: \"bold\",\r\n    color: \"black\",\r\n};\r\n","import { useGetSectionsProductsQuery } from \"generated/graphql\";\r\nimport { Redirect } from \"react-router\";\r\nimport { nanoid } from \"nanoid\";\r\nimport \"css/sections.scss\";\r\nimport { SectionsForNav } from \"./SectionsForNav\";\r\n\r\nconst Sections = () => {\r\n    const uri = window.location.href;\r\n    const section_id = Number(uri.split(\"?\")[1]);\r\n    const section_name = uri.slice(uri.lastIndexOf(\"/\") + 1, uri.indexOf(\"?\"));\r\n\r\n    const { data, loading, error } = useGetSectionsProductsQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    if (loading) return <></>;\r\n\r\n    if (error || !data) {\r\n        return <Redirect to='#/' />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SectionsForNav />\r\n\r\n            <div className='container'>\r\n                <h1\r\n                    style={{\r\n                        textAlign: \"center\",\r\n                    }}\r\n                >\r\n                    {section_name}\r\n                </h1>\r\n\r\n                <div className='products-grid'>\r\n                    {data.getSectionsProducts.map(product => {\r\n                        return (\r\n                            <div className='card' key={nanoid()}>\r\n                                <a href={`#/product:${product.product_id}`}>\r\n                                    <div className='card-image'>\r\n                                        <img\r\n                                            src={`${\r\n                                                product.images![0].img_url || \"\"\r\n                                            }`}\r\n                                            alt={product.name}\r\n                                        />\r\n                                    </div>\r\n                                    <div className='card-content'>\r\n                                        <h4 style={{ marginBottom: \"0px\" }}>\r\n                                            {product.name}\r\n                                        </h4>\r\n                                        <p>\r\n                                            $\r\n                                            {Number(\r\n                                                product.price / 100\r\n                                            ).toFixed(2)}\r\n                                        </p>\r\n                                    </div>\r\n                                </a>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Sections;\r\n"],"sourceRoot":""}