{"version":3,"sources":["../node_modules/nanoid/index.browser.js","../node_modules/gooey-react/dist-esm/index.js","components/FAQ.tsx"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Goo","children","className","composite","intensity","style","blur","alpha","shift","a","React","createElement","Fragment","pointerEvents","position","colorInterpolationFilters","stdDeviation","values","in","filter","FAQ","bubbles","i","push","color","Math","random","textAlign","map","_val"],"mappings":"gJAiCA,IA2CIA,EAAS,WAKX,IAL0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAG3CA,KAAQ,CAMb,IAAIM,EAAqB,GAAdJ,EAAMF,GAGfC,GAFEK,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,I,mHC7DMQ,EArCH,SAAC,GAOP,IANJC,EAMI,EANJA,SACAC,EAKI,EALJA,UAKI,IAJJC,iBAII,aAHJC,iBAGI,MAHQ,SAGR,MAFJZ,UAEI,MAFC,cAED,EADJa,EACI,EADJA,MAEMC,EAAqB,SAAdF,EAAuB,EAAkB,WAAdA,EAAyB,GAAK,GAChEG,EAAe,EAAPD,EACRE,EAAQD,GAAS,EAIjBE,EAAI,SAAH,OAAYF,EAAZ,YAAqBC,GAC5B,OAAoBE,IAAMC,cAAcD,IAAME,SAAU,KAAmBF,IAAMC,cAAc,MAAO,CACpGN,MAAO,CACLQ,cAAe,OACfC,SAAU,aAEEJ,IAAMC,cAAc,OAAQ,KAAmBD,IAAMC,cAAc,SAAU,CAC3FI,0BAA2B,OAC3BvB,GAAIA,GACUkB,IAAMC,cAAc,iBAAkB,CACpDK,aAAcV,IACCI,IAAMC,cAAc,gBAAiB,CACpDM,OAAQ,GAAF,OAfE,YAeF,YAdE,YAcF,YAbE,YAaF,YAAoBR,KACxBN,GAA0BO,IAAMC,cAAc,cAAe,CAC/DO,GAAI,qBACcR,IAAMC,cAAc,MAAO,CAC7CT,UAAWA,EACXG,MAAO,2BAAKA,GAAP,IACHc,OAAQ,QAAF,OAAU3B,EAAV,QAEPS,K,OCkCUmB,UAlEH,WAGR,IAFA,IAAMC,EAAiB,GAEdC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAAC,IAAD,EACxBD,EAAQE,KACJ,qBAEIrB,UAAU,SACVG,OAAK,GAEGmB,MAAO,QAFV,cAGI,SAHJ,UAGkB,EAAoB,EAAhBC,KAAKC,SAH3B,sBAII,aAJJ,UAIsB,EAAoB,EAAhBD,KAAKC,SAJ/B,sBAKI,aALJ,UAK2C,IAAhBD,KAAKC,SAAT,EALvB,oBAMI,SANJ,UAMkB,EAAoB,EAAhBD,KAAKC,SAN3B,oBAOI,UAPJ,WAOoB,GAAK,EAAoB,EAAhBD,KAAKC,UAPlC,UAFApC,gBAgBjB,OACI,sBAAKY,UAAU,kBAAf,UACI,qBAAKA,UAAU,OAAf,SACI,oBAAIG,MAAO,CAAEsB,UAAW,UAAxB,mBAEJ,cAAC,EAAD,UACI,qBAAKzB,UAAU,gBAAf,SACI,qBAAKA,UAAU,UAAf,SACKmB,EAAQO,KAAI,SAACC,EAAMP,GAChB,OAAO,8BAAqBD,EAAQC,IAAnBhC,wBAKjC,sBAAKY,UAAU,UAAf,UACI,wBACA","file":"static/js/5.a5640515.chunk.js","sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React from 'react';\n\nconst Goo = ({\n  children,\n  className,\n  composite = false,\n  intensity = 'medium',\n  id = 'gooey-react',\n  style\n}) => {\n  const blur = intensity === 'weak' ? 8 : intensity === 'strong' ? 16 : 12;\n  const alpha = blur * 6;\n  const shift = alpha / -2;\n  const r = '1 0 0 0 0';\n  const g = '0 1 0 0 0';\n  const b = '0 0 1 0 0';\n  const a = `0 0 0 ${alpha} ${shift}`;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"svg\", {\n    style: {\n      pointerEvents: 'none',\n      position: 'absolute'\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    colorInterpolationFilters: \"sRGB\",\n    id: id\n  }, /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: blur\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    values: `${r} ${g} ${b} ${a}`\n  }), composite && /*#__PURE__*/React.createElement(\"feComposite\", {\n    in: \"SourceGraphic\"\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: { ...style,\n      filter: `url(#${id})`\n    }\n  }, children));\n};\n\nexport default Goo;","import \"css/faq.scss\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Goo from \"gooey-react\";\r\n\r\nconst FAQ = () => {\r\n    const bubbles: any[] = [];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        bubbles.push(\r\n            <div\r\n                key={nanoid()}\r\n                className='bubble'\r\n                style={\r\n                    {\r\n                        color: \"pink\",\r\n                        [\"--size\"]: `${2 + Math.random() * 4}rem`,\r\n                        [\"--distance\"]: `${6 + Math.random() * 4}rem`,\r\n                        [\"--position\"]: `${-5 + Math.random() * 110}%`,\r\n                        [\"--time\"]: `${4 + Math.random() * 2}s`,\r\n                        [\"--delay\"]: `${-1 * (2 + Math.random() * 2)}s`,\r\n                    } as any\r\n                }\r\n            ></div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='faq-pageWrapper'>\r\n            <div className='main'>\r\n                <h1 style={{ textAlign: \"center\" }}>FAQ</h1>\r\n            </div>\r\n            <Goo>\r\n                <div className='faq-container'>\r\n                    <div className='bubbles'>\r\n                        {bubbles.map((_val, i) => {\r\n                            return <div key={nanoid()}>{bubbles[i]}</div>;\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Goo>\r\n            <div className='content'>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n            {/* <svg style={{ position: \"fixed\", top: \"100vh\" }}>\r\n                <defs>\r\n                    <filter id='blob'>\r\n                        <feGaussianBlur\r\n                            in='SourceGraphic'\r\n                            stdDeviation='10'\r\n                            result='blur'\r\n                        ></feGaussianBlur>\r\n                        <feColorMatrix\r\n                            in='blur'\r\n                            mode='matrix'\r\n                            values='1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9'\r\n                            result='blob'\r\n                        ></feColorMatrix>\r\n                        {/* <feComposite\r\n                            in='SourceGraphic'\r\n                            in2='blob'\r\n                            operator='atop'\r\n                        ></feComposite>\r\n                    </filter>\r\n                </defs>\r\n            </svg> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FAQ;\r\n"],"sourceRoot":""}