{"version":3,"sources":["accessToken.ts","CheckAuth.ts","generated/graphql.tsx","images/DazzleCrewLogo.webp","components/navbar/Logo.tsx","components/navbar/Navbar.tsx","components/footer/Footer.tsx","components/Carousel.tsx","components/products/Products.tsx","components/UsersOrders.tsx","Sorting.ts","redux/actions/userAction.ts","components/products/ProductDetails.tsx","components/checkout/Cart.tsx","components/checkout/Paid.tsx","components/checkout/Checkout.tsx","components/FAQ.tsx","components/Contact.tsx","components/ShippingPolicy.tsx","components/OrderSuccess.tsx","components/Sections/ViewSection.tsx","routes/Routes.tsx","App.tsx","components/Preloader.tsx","GetMaintenance.ts","URI.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AddPaypalOrderDocument","gql","CheckoutDocument","GetCurrUserDocument","GetMaintenanceDocument","GetProductDocument","GetProductsDocument","GetProductsByIdsDocument","GetProductsOptionsDocument","GetSectionByIdDocument","GetSectionsDocument","GetSectionsProductsDocument","GetShippingCostDocument","GetSocialsDocument","GetUsersOrdersDocument","LoginDocument","useLoginMutation","baseOptions","Apollo","PaypalCheckoutDocument","ValidateCouponDocument","Logo","href","className","src","DC_LOGO","Navbar","useState","animation","setAnimation","useEffect","window","location","split","length","document","getElementById","classList","remove","style","backgroundColor","add","innerWidth","anime","timeline","targets","translateY","translateZ","opacity","easing","duration","delay","el","i","onscroll","contains","background","complete","setTimeout","login","handler","res","a","variables","user_id","googleId","email","profileObj","response","data","localStorage","setItem","refreshToken","reload","signIn","useGoogleLogin","clientId","onSuccess","logout","closeMobileSidenav","console","log","sidenav","transform","body","id","onClick","maxWidth","display","marginLeft","marginRight","left","position","flexDirection","justifyContent","Footer","component","Carousel","elems","querySelectorAll","M","init","fullWidth","indicators","elem","getInstance","next","GetSections","sdata","sloading","loading","Products","_t","value","scale","stagger","start","paddingLeft","paddingRight","getSections","marginBottom","fontWeight","map","_val","section","margin","section_id","thumbnail","alt","name","getProducts","product","product_id","images","img_url","fontSize","Number","price","toFixed","showDetails","tmp","products","Subtotal","sTotal","productSubtotal","quantityOrdered","productsSubtotal","shippingTotal","calcSubtotals","innerHTML","UsersOrders","useLocation","sortByProp","arr","prop","invert","props","forEach","sort","reverse","j","slice","pop","state","error","sortedOrders","getUsersOrders","minHeight","marginTop","str","dateOfPurchase","amountOff","order_total","discount","date_of_purchase","shipping","JSON","parse","padding","borderLeft","paddingTop","paddingBottom","color","order_id","coupon","width","line1","city","postal_code","country","zIndex","height","tracking_num","borderBottom","addProductToCart","type","changeQuantityOnProduct","newQuantity","productIndex","GetProductOptions","odata","oloading","ProductDetails","dispatch","useDispatch","option_id","option_price","option_stock","option","setOption","Tooltip","Dropdown","getProduct","desc","percent","org_stock","stock","to","getProductsOptions","maxHeight","prev","data-position","data-tooltip","border","data-target","toast","html","textTransform","Cart","useSelector","productsInCart","product_ids","push","products_str","stringify","refresh","quantities","setState","total","setTotal","tmp_total","quantity","getProductsByIds","options","ii","minLength","maxLength","pattern","onBlur","e","target","splice","onChange","match","foo","z","textAlign","Paid","CardSection","iconStyle","hidePostalCode","base","iconColor","fontFamily","fontSmoothing","invalid","Checkout","sh_res","useGetShippingCostQuery","US_ORDER","useCheckoutMutation","checkout","useValidateCouponMutation","validateCoupon","usePaypalCheckoutMutation","paypalCheckout","useAddPaypalOrderMutation","addPaypalOrder","discountPH","setDiscountPH","setCoupon","subtotal","setSubtotal","Total","setShipping","address","zip","billing","setBilling","paidFor","setPaidFor","err","setError","SET_US_ORDER","setAddress","paypalRef","useRef","couponRef","current","Autocomplete","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusettes","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Ohio","Oklahoma","Oregon","Pennsylvania","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","getShippingCost","win","children","paypal","Buttons","createOrder","actions","order","create","purchase_units","description","amount","currency_code","onApprove","_ppdata","capture","purchaseUnits_str","getCurrUser","payee","email_address","onError","render","handleSubmit","payBtn","stripe","elements","card","getElement","CardElement","createToken","result","message","token_str","shipping_str","billing_str","shipping_info","billing_info","tmp_subtotal","tax","Math","round","focusable","viewBox","d","fillRule","letterSpacing","toLowerCase","htmlFor","data-error","coupon_name","attributes","nodeValue","percentage","ref","borderRadius","tmp_email","validateForm","FAQ","eyeColors","eyeColor","floor","random","Contact","ShippingPolicy","OrderSuccess","GetSection","ViewSection","getSectionById","getSectionsProducts","Routes","stripePromise","loadStripe","exact","path","App","Preloader","elasticity","loop","translateX","GetMaintenance","URI","AppWrapper","maintance","pageLoader","setPageLoader","getItem","fetch","method","credentials","headers","then","json","getMaintenance","loadState","serializedState","initState","store","createStore","action","newProduct","composeWithDevTools","subscribe","saveState","getState","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","bind","catch","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.32ddf575.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n\r\nexport const setMainAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getMainAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { getAccessToken, getMainAccessToken } from \"./accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const checkMainAuth = () => {\r\n    const token = getMainAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default checkAuth();\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getShippingCost: Scalars['String'];\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getOrderById: GetOrdersResponse;\n  getProducts: Array<ProductsWithImages>;\n  getProductsByIds: Array<ProductsWithOptionAndImages>;\n  apiGetProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  apiGetProduct: ProductsWithImages;\n  getApiUsers: Array<ApiUser>;\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n  getMaintenance: Scalars['Boolean'];\n  getSocials: Array<Socials>;\n  getSections: Array<Sections>;\n  getSectionById: Sections;\n  getProductsSections: Array<SectionsOrNull>;\n  getSectionsProducts: Array<ProductsWithImages>;\n  getProductsOptions: Array<Options>;\n  getProductShipping: Array<Shipping>;\n};\n\n\nexport type QueryGetShippingCostArgs = {\n  products: Scalars['String'];\n  US_ORDER: Scalars['Boolean'];\n};\n\n\nexport type QueryGetOrderByIdArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsByIdsArgs = {\n  products_str: Scalars['String'];\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryApiGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetSocialsArgs = {\n  component: Scalars['String'];\n};\n\n\nexport type QueryGetSectionByIdArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsSectionsArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetSectionsProductsArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsOptionsArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductShippingArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products?: Maybe<Array<OrdersProductsWithImages>>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n  order_total?: Maybe<Scalars['Float']>;\n  coupon?: Maybe<Scalars['String']>;\n  discount?: Maybe<Scalars['String']>;\n  shipping?: Maybe<Scalars['String']>;\n  warning?: Maybe<Scalars['String']>;\n  date_of_purchase?: Maybe<Scalars['String']>;\n};\n\nexport type OrdersProductsWithImages = {\n  __typename?: 'OrdersProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  quantityOrdered: Scalars['Float'];\n  productSubtotal?: Maybe<Scalars['Float']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n  hidden: Scalars['Boolean'];\n};\n\nexport type ProductsWithOptionAndImages = {\n  __typename?: 'ProductsWithOptionAndImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n  options?: Maybe<Array<Options>>;\n};\n\nexport type Options = {\n  __typename?: 'Options';\n  option_id: Scalars['Int'];\n  name: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  index: Scalars['Int'];\n};\n\nexport type ApiUser = {\n  __typename?: 'ApiUser';\n  uuid: Scalars['Float'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Socials = {\n  __typename?: 'Socials';\n  id: Scalars['Int'];\n  index: Scalars['Int'];\n  component: Scalars['String'];\n  display: Scalars['Boolean'];\n  social_logo: Scalars['String'];\n  social_url: Scalars['String'];\n};\n\nexport type Sections = {\n  __typename?: 'Sections';\n  section_id: Scalars['Int'];\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n};\n\nexport type SectionsOrNull = {\n  __typename?: 'SectionsOrNull';\n  section_id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  thumbnail?: Maybe<Scalars['String']>;\n};\n\nexport type Shipping = {\n  __typename?: 'Shipping';\n  shipping_id: Scalars['Int'];\n  country: Scalars['String'];\n  price: Scalars['Float'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  editTracking: Scalars['Boolean'];\n  paypalCheckout: Scalars['String'];\n  addPaypalOrder: Scalars['String'];\n  checkout: Scalars['String'];\n  toggleProductDisplay: Scalars['Boolean'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  deleteApiUser: Scalars['Boolean'];\n  addApiUser: Scalars['Boolean'];\n  removeWarning: Scalars['Boolean'];\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n  toggleMaintenance: Scalars['Boolean'];\n  maintenanceLogin: AuthResponse;\n  updateSocialUrl: Scalars['Boolean'];\n  toggleSocialDisplay: Scalars['Boolean'];\n  initSocials: Scalars['Boolean'];\n  addSection: Scalars['Boolean'];\n  deleteSection: Scalars['Boolean'];\n  addProductToSection: Scalars['String'];\n  removeProductFromSection: Scalars['Boolean'];\n  updateSection: Scalars['Boolean'];\n  addOptionToProduct: Scalars['Boolean'];\n  updateOptions: Scalars['Boolean'];\n  deleteOptions: Scalars['Boolean'];\n  addShippingToProduct: Scalars['Boolean'];\n  deleteShippingFromProduct: Scalars['Boolean'];\n};\n\n\nexport type MutationEditTrackingArgs = {\n  order_id: Scalars['Float'];\n  new_tracking_num: Scalars['String'];\n};\n\n\nexport type MutationPaypalCheckoutArgs = {\n  US_ORDER: Scalars['Boolean'];\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n};\n\n\nexport type MutationAddPaypalOrderArgs = {\n  US_ORDER: Scalars['Boolean'];\n  purchase_units: Scalars['String'];\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationToggleProductDisplayArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationRemoveImgFromProductArgs = {\n  img_id: Scalars['Float'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationDeleteApiUserArgs = {\n  uuid: Scalars['Float'];\n};\n\n\nexport type MutationAddApiUserArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationRemoveWarningArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationMaintenanceLoginArgs = {\n  password: Scalars['String'];\n  access_id: Scalars['String'];\n};\n\n\nexport type MutationUpdateSocialUrlArgs = {\n  id: Scalars['Float'];\n  url: Scalars['String'];\n};\n\n\nexport type MutationToggleSocialDisplayArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type MutationAddSectionArgs = {\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteSectionArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type MutationAddProductToSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationRemoveProductFromSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateSectionArgs = {\n  section_id: Scalars['Float'];\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddOptionToProductArgs = {\n  product_id: Scalars['Float'];\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationUpdateOptionsArgs = {\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationDeleteOptionsArgs = {\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationAddShippingToProductArgs = {\n  shipping_str: Scalars['String'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationDeleteShippingFromProductArgs = {\n  shipping_str: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddPaypalOrderMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n  US_ORDER: Scalars['Boolean'];\n  purchase_units: Scalars['String'];\n}>;\n\n\nexport type AddPaypalOrderMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addPaypalOrder'>\n);\n\nexport type CheckoutMutationVariables = Exact<{\n  token: Scalars['String'];\n  user_id: Scalars['String'];\n  products: Scalars['String'];\n  shipping_info: Scalars['String'];\n  billing_info: Scalars['String'];\n  coupon: Scalars['String'];\n}>;\n\n\nexport type CheckoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'checkout'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetCurrUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCurrUserQuery = (\n  { __typename?: 'Query' }\n  & { getCurrUser: (\n    { __typename?: 'Users' }\n    & Pick<Users, 'email' | 'uuid' | 'user_id'>\n  ) }\n);\n\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaintenanceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getMaintenance'>\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type GetProductsByIdsQueryVariables = Exact<{\n  products_str: Scalars['String'];\n}>;\n\n\nexport type GetProductsByIdsQuery = (\n  { __typename?: 'Query' }\n  & { getProductsByIds: Array<(\n    { __typename?: 'ProductsWithOptionAndImages' }\n    & Pick<ProductsWithOptionAndImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>>, options?: Maybe<Array<(\n      { __typename?: 'Options' }\n      & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\n    )>> }\n  )> }\n);\n\nexport type GetProductsOptionsQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductsOptionsQuery = (\n  { __typename?: 'Query' }\n  & { getProductsOptions: Array<(\n    { __typename?: 'Options' }\n    & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\n  )> }\n);\n\nexport type GetSectionByIdQueryVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type GetSectionByIdQuery = (\n  { __typename?: 'Query' }\n  & { getSectionById: (\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'thumbnail' | 'name'>\n  ) }\n);\n\nexport type GetSectionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSectionsQuery = (\n  { __typename?: 'Query' }\n  & { getSections: Array<(\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'name' | 'thumbnail'>\n  )> }\n);\n\nexport type GetSectionsProductsQueryVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type GetSectionsProductsQuery = (\n  { __typename?: 'Query' }\n  & { getSectionsProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url' | 'index'>\n    )>> }\n  )> }\n);\n\nexport type GetShippingCostQueryVariables = Exact<{\n  US_ORDER: Scalars['Boolean'];\n  products: Scalars['String'];\n}>;\n\n\nexport type GetShippingCostQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getShippingCost'>\n);\n\nexport type GetSocialsQueryVariables = Exact<{\n  component: Scalars['String'];\n}>;\n\n\nexport type GetSocialsQuery = (\n  { __typename?: 'Query' }\n  & { getSocials: Array<(\n    { __typename?: 'Socials' }\n    & Pick<Socials, 'id' | 'index' | 'social_url' | 'social_logo' | 'display'>\n  )> }\n);\n\nexport type GetUsersOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getUsersOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type MaintenanceLoginMutationVariables = Exact<{\n  access_id: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type MaintenanceLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { maintenanceLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'refreshToken' | 'accessToken'>\n  ) }\n);\n\nexport type PaypalCheckoutMutationVariables = Exact<{\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  US_ORDER: Scalars['Boolean'];\n}>;\n\n\nexport type PaypalCheckoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'paypalCheckout'>\n);\n\nexport type ValidateCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type ValidateCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'validateCoupon'>\n);\n\n\nexport const AddPaypalOrderDocument = gql`\n    mutation addPaypalOrder($user_id: String!, $coupon: String!, $products: String!, $US_ORDER: Boolean!, $purchase_units: String!) {\n  addPaypalOrder(\n    user_id: $user_id\n    coupon: $coupon\n    products: $products\n    purchase_units: $purchase_units\n    US_ORDER: $US_ORDER\n  )\n}\n    `;\nexport type AddPaypalOrderMutationFn = Apollo.MutationFunction<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>;\n\n/**\n * __useAddPaypalOrderMutation__\n *\n * To run a mutation, you first call `useAddPaypalOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPaypalOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPaypalOrderMutation, { data, loading, error }] = useAddPaypalOrderMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      coupon: // value for 'coupon'\n *      products: // value for 'products'\n *      US_ORDER: // value for 'US_ORDER'\n *      purchase_units: // value for 'purchase_units'\n *   },\n * });\n */\nexport function useAddPaypalOrderMutation(baseOptions?: Apollo.MutationHookOptions<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>) {\n        return Apollo.useMutation<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>(AddPaypalOrderDocument, baseOptions);\n      }\nexport type AddPaypalOrderMutationHookResult = ReturnType<typeof useAddPaypalOrderMutation>;\nexport type AddPaypalOrderMutationResult = Apollo.MutationResult<AddPaypalOrderMutation>;\nexport type AddPaypalOrderMutationOptions = Apollo.BaseMutationOptions<AddPaypalOrderMutation, AddPaypalOrderMutationVariables>;\nexport const CheckoutDocument = gql`\n    mutation checkout($token: String!, $user_id: String!, $products: String!, $shipping_info: String!, $billing_info: String!, $coupon: String!) {\n  checkout(\n    token: $token\n    user_id: $user_id\n    products: $products\n    shipping_info: $shipping_info\n    billing_info: $billing_info\n    coupon: $coupon\n  )\n}\n    `;\nexport type CheckoutMutationFn = Apollo.MutationFunction<CheckoutMutation, CheckoutMutationVariables>;\n\n/**\n * __useCheckoutMutation__\n *\n * To run a mutation, you first call `useCheckoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCheckoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [checkoutMutation, { data, loading, error }] = useCheckoutMutation({\n *   variables: {\n *      token: // value for 'token'\n *      user_id: // value for 'user_id'\n *      products: // value for 'products'\n *      shipping_info: // value for 'shipping_info'\n *      billing_info: // value for 'billing_info'\n *      coupon: // value for 'coupon'\n *   },\n * });\n */\nexport function useCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<CheckoutMutation, CheckoutMutationVariables>) {\n        return Apollo.useMutation<CheckoutMutation, CheckoutMutationVariables>(CheckoutDocument, baseOptions);\n      }\nexport type CheckoutMutationHookResult = ReturnType<typeof useCheckoutMutation>;\nexport type CheckoutMutationResult = Apollo.MutationResult<CheckoutMutation>;\nexport type CheckoutMutationOptions = Apollo.BaseMutationOptions<CheckoutMutation, CheckoutMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetCurrUserDocument = gql`\n    query getCurrUser {\n  getCurrUser {\n    email\n    uuid\n    user_id\n  }\n}\n    `;\n\n/**\n * __useGetCurrUserQuery__\n *\n * To run a query within a React component, call `useGetCurrUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCurrUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCurrUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCurrUserQuery(baseOptions?: Apollo.QueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\n        return Apollo.useQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\n      }\nexport function useGetCurrUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\n          return Apollo.useLazyQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\n        }\nexport type GetCurrUserQueryHookResult = ReturnType<typeof useGetCurrUserQuery>;\nexport type GetCurrUserLazyQueryHookResult = ReturnType<typeof useGetCurrUserLazyQuery>;\nexport type GetCurrUserQueryResult = Apollo.QueryResult<GetCurrUserQuery, GetCurrUserQueryVariables>;\nexport const GetMaintenanceDocument = gql`\n    query getMaintenance {\n  getMaintenance\n}\n    `;\n\n/**\n * __useGetMaintenanceQuery__\n *\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaintenanceQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n      }\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n        }\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const GetProductsByIdsDocument = gql`\n    query getProductsByIds($products_str: String!) {\n  getProductsByIds(products_str: $products_str) {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n    options {\n      option_id\n      name\n      price\n      stock\n      index\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsByIdsQuery__\n *\n * To run a query within a React component, call `useGetProductsByIdsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsByIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsByIdsQuery({\n *   variables: {\n *      products_str: // value for 'products_str'\n *   },\n * });\n */\nexport function useGetProductsByIdsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>) {\n        return Apollo.useQuery<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>(GetProductsByIdsDocument, baseOptions);\n      }\nexport function useGetProductsByIdsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>(GetProductsByIdsDocument, baseOptions);\n        }\nexport type GetProductsByIdsQueryHookResult = ReturnType<typeof useGetProductsByIdsQuery>;\nexport type GetProductsByIdsLazyQueryHookResult = ReturnType<typeof useGetProductsByIdsLazyQuery>;\nexport type GetProductsByIdsQueryResult = Apollo.QueryResult<GetProductsByIdsQuery, GetProductsByIdsQueryVariables>;\nexport const GetProductsOptionsDocument = gql`\n    query getProductsOptions($product_id: Float!) {\n  getProductsOptions(product_id: $product_id) {\n    option_id\n    name\n    price\n    stock\n    index\n  }\n}\n    `;\n\n/**\n * __useGetProductsOptionsQuery__\n *\n * To run a query within a React component, call `useGetProductsOptionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsOptionsQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductsOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\n        return Apollo.useQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\n      }\nexport function useGetProductsOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\n        }\nexport type GetProductsOptionsQueryHookResult = ReturnType<typeof useGetProductsOptionsQuery>;\nexport type GetProductsOptionsLazyQueryHookResult = ReturnType<typeof useGetProductsOptionsLazyQuery>;\nexport type GetProductsOptionsQueryResult = Apollo.QueryResult<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>;\nexport const GetSectionByIdDocument = gql`\n    query getSectionById($section_id: Float!) {\n  getSectionById(section_id: $section_id) {\n    section_id\n    thumbnail\n    name\n  }\n}\n    `;\n\n/**\n * __useGetSectionByIdQuery__\n *\n * To run a query within a React component, call `useGetSectionByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionByIdQuery({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useGetSectionByIdQuery(baseOptions: Apollo.QueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n        return Apollo.useQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n      }\nexport function useGetSectionByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n        }\nexport type GetSectionByIdQueryHookResult = ReturnType<typeof useGetSectionByIdQuery>;\nexport type GetSectionByIdLazyQueryHookResult = ReturnType<typeof useGetSectionByIdLazyQuery>;\nexport type GetSectionByIdQueryResult = Apollo.QueryResult<GetSectionByIdQuery, GetSectionByIdQueryVariables>;\nexport const GetSectionsDocument = gql`\n    query getSections {\n  getSections {\n    section_id\n    name\n    thumbnail\n  }\n}\n    `;\n\n/**\n * __useGetSectionsQuery__\n *\n * To run a query within a React component, call `useGetSectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSectionsQuery(baseOptions?: Apollo.QueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n        return Apollo.useQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n      }\nexport function useGetSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n        }\nexport type GetSectionsQueryHookResult = ReturnType<typeof useGetSectionsQuery>;\nexport type GetSectionsLazyQueryHookResult = ReturnType<typeof useGetSectionsLazyQuery>;\nexport type GetSectionsQueryResult = Apollo.QueryResult<GetSectionsQuery, GetSectionsQueryVariables>;\nexport const GetSectionsProductsDocument = gql`\n    query getSectionsProducts($section_id: Float!) {\n  getSectionsProducts(section_id: $section_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n    images {\n      img_id\n      img_url\n      index\n    }\n  }\n}\n    `;\n\n/**\n * __useGetSectionsProductsQuery__\n *\n * To run a query within a React component, call `useGetSectionsProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionsProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionsProductsQuery({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useGetSectionsProductsQuery(baseOptions: Apollo.QueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\n        return Apollo.useQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\n      }\nexport function useGetSectionsProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\n        }\nexport type GetSectionsProductsQueryHookResult = ReturnType<typeof useGetSectionsProductsQuery>;\nexport type GetSectionsProductsLazyQueryHookResult = ReturnType<typeof useGetSectionsProductsLazyQuery>;\nexport type GetSectionsProductsQueryResult = Apollo.QueryResult<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>;\nexport const GetShippingCostDocument = gql`\n    query getShippingCost($US_ORDER: Boolean!, $products: String!) {\n  getShippingCost(US_ORDER: $US_ORDER, products: $products)\n}\n    `;\n\n/**\n * __useGetShippingCostQuery__\n *\n * To run a query within a React component, call `useGetShippingCostQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetShippingCostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetShippingCostQuery({\n *   variables: {\n *      US_ORDER: // value for 'US_ORDER'\n *      products: // value for 'products'\n *   },\n * });\n */\nexport function useGetShippingCostQuery(baseOptions: Apollo.QueryHookOptions<GetShippingCostQuery, GetShippingCostQueryVariables>) {\n        return Apollo.useQuery<GetShippingCostQuery, GetShippingCostQueryVariables>(GetShippingCostDocument, baseOptions);\n      }\nexport function useGetShippingCostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetShippingCostQuery, GetShippingCostQueryVariables>) {\n          return Apollo.useLazyQuery<GetShippingCostQuery, GetShippingCostQueryVariables>(GetShippingCostDocument, baseOptions);\n        }\nexport type GetShippingCostQueryHookResult = ReturnType<typeof useGetShippingCostQuery>;\nexport type GetShippingCostLazyQueryHookResult = ReturnType<typeof useGetShippingCostLazyQuery>;\nexport type GetShippingCostQueryResult = Apollo.QueryResult<GetShippingCostQuery, GetShippingCostQueryVariables>;\nexport const GetSocialsDocument = gql`\n    query getSocials($component: String!) {\n  getSocials(component: $component) {\n    id\n    index\n    social_url\n    social_logo\n    display\n  }\n}\n    `;\n\n/**\n * __useGetSocialsQuery__\n *\n * To run a query within a React component, call `useGetSocialsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSocialsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSocialsQuery({\n *   variables: {\n *      component: // value for 'component'\n *   },\n * });\n */\nexport function useGetSocialsQuery(baseOptions: Apollo.QueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n        return Apollo.useQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n      }\nexport function useGetSocialsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n        }\nexport type GetSocialsQueryHookResult = ReturnType<typeof useGetSocialsQuery>;\nexport type GetSocialsLazyQueryHookResult = ReturnType<typeof useGetSocialsLazyQuery>;\nexport type GetSocialsQueryResult = Apollo.QueryResult<GetSocialsQuery, GetSocialsQueryVariables>;\nexport const GetUsersOrdersDocument = gql`\n    query getUsersOrders {\n  getUsersOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    order_total\n    coupon\n    discount\n    shipping\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetUsersOrdersQuery__\n *\n * To run a query within a React component, call `useGetUsersOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\n        return Apollo.useQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\n      }\nexport function useGetUsersOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\n        }\nexport type GetUsersOrdersQueryHookResult = ReturnType<typeof useGetUsersOrdersQuery>;\nexport type GetUsersOrdersLazyQueryHookResult = ReturnType<typeof useGetUsersOrdersLazyQuery>;\nexport type GetUsersOrdersQueryResult = Apollo.QueryResult<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation login($user_id: String!, $email: String!) {\n  login(user_id: $user_id, email: $email) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MaintenanceLoginDocument = gql`\n    mutation maintenanceLogin($access_id: String!, $password: String!) {\n  maintenanceLogin(access_id: $access_id, password: $password) {\n    refreshToken\n    accessToken\n  }\n}\n    `;\nexport type MaintenanceLoginMutationFn = Apollo.MutationFunction<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>;\n\n/**\n * __useMaintenanceLoginMutation__\n *\n * To run a mutation, you first call `useMaintenanceLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMaintenanceLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [maintenanceLoginMutation, { data, loading, error }] = useMaintenanceLoginMutation({\n *   variables: {\n *      access_id: // value for 'access_id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useMaintenanceLoginMutation(baseOptions?: Apollo.MutationHookOptions<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>) {\n        return Apollo.useMutation<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>(MaintenanceLoginDocument, baseOptions);\n      }\nexport type MaintenanceLoginMutationHookResult = ReturnType<typeof useMaintenanceLoginMutation>;\nexport type MaintenanceLoginMutationResult = Apollo.MutationResult<MaintenanceLoginMutation>;\nexport type MaintenanceLoginMutationOptions = Apollo.BaseMutationOptions<MaintenanceLoginMutation, MaintenanceLoginMutationVariables>;\nexport const PaypalCheckoutDocument = gql`\n    mutation paypalCheckout($products: String!, $coupon: String!, $US_ORDER: Boolean!) {\n  paypalCheckout(products: $products, coupon: $coupon, US_ORDER: $US_ORDER)\n}\n    `;\nexport type PaypalCheckoutMutationFn = Apollo.MutationFunction<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>;\n\n/**\n * __usePaypalCheckoutMutation__\n *\n * To run a mutation, you first call `usePaypalCheckoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePaypalCheckoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [paypalCheckoutMutation, { data, loading, error }] = usePaypalCheckoutMutation({\n *   variables: {\n *      products: // value for 'products'\n *      coupon: // value for 'coupon'\n *      US_ORDER: // value for 'US_ORDER'\n *   },\n * });\n */\nexport function usePaypalCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>) {\n        return Apollo.useMutation<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>(PaypalCheckoutDocument, baseOptions);\n      }\nexport type PaypalCheckoutMutationHookResult = ReturnType<typeof usePaypalCheckoutMutation>;\nexport type PaypalCheckoutMutationResult = Apollo.MutationResult<PaypalCheckoutMutation>;\nexport type PaypalCheckoutMutationOptions = Apollo.BaseMutationOptions<PaypalCheckoutMutation, PaypalCheckoutMutationVariables>;\nexport const ValidateCouponDocument = gql`\n    mutation validateCoupon($coupon_name: String!) {\n  validateCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type ValidateCouponMutationFn = Apollo.MutationFunction<ValidateCouponMutation, ValidateCouponMutationVariables>;\n\n/**\n * __useValidateCouponMutation__\n *\n * To run a mutation, you first call `useValidateCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useValidateCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [validateCouponMutation, { data, loading, error }] = useValidateCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useValidateCouponMutation(baseOptions?: Apollo.MutationHookOptions<ValidateCouponMutation, ValidateCouponMutationVariables>) {\n        return Apollo.useMutation<ValidateCouponMutation, ValidateCouponMutationVariables>(ValidateCouponDocument, baseOptions);\n      }\nexport type ValidateCouponMutationHookResult = ReturnType<typeof useValidateCouponMutation>;\nexport type ValidateCouponMutationResult = Apollo.MutationResult<ValidateCouponMutation>;\nexport type ValidateCouponMutationOptions = Apollo.BaseMutationOptions<ValidateCouponMutation, ValidateCouponMutationVariables>;","export default __webpack_public_path__ + \"static/media/DazzleCrewLogo.a477ee5a.webp\";","import DC_LOGO from \"../../images/DazzleCrewLogo.webp\";\r\nconst Logo = () => {\r\n    return (\r\n        <>\r\n            <a href=\"#/home\" className=\"blogo\">\r\n                {/* Dazzle Crew */}\r\n                <img src={DC_LOGO} />\r\n            </a>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import { useGoogleLogin } from \"react-google-login\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\nimport { checkAuth } from \"../../CheckAuth\";\r\nimport { useLoginMutation } from \"../../generated/graphql\";\r\nimport \"../../css/navbar.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport Logo from \"./Logo\";\r\nimport anime from \"animejs\";\r\n\r\nconst Navbar = () => {\r\n    const [animation, setAnimation] = useState(false);\r\n    useEffect(() => {\r\n        if (\r\n            window.location.href.split(\"/\")[\r\n                window.location.href.split(\"/\").length - 1\r\n            ] !== \"products\"\r\n        ) {\r\n            try {\r\n                document\r\n                    .getElementById(\"navbar\")!\r\n                    .classList.remove(\"nav-default\");\r\n\r\n                document.getElementById(\"navbar\")!.style.backgroundColor =\r\n                    \"#000000\";\r\n\r\n                document\r\n                    .getElementById(\"navbar\")!\r\n                    .classList.add(\"nav-scrolled\");\r\n            } catch {}\r\n        } else if (window.innerWidth > 1250) {\r\n            if (!animation) {\r\n                setAnimation(true);\r\n                anime\r\n                    .timeline({})\r\n                    .add({\r\n                        targets: \".brand-logo\",\r\n                        translateY: [-50, 0],\r\n                        translateZ: 0,\r\n                        opacity: [0, 1],\r\n                        easing: \"easeOutExpo\",\r\n                        duration: 500,\r\n                    })\r\n                    .add(\r\n                        {\r\n                            targets: \"nav ul li\",\r\n                            translateY: [-50, 0],\r\n                            translateZ: 0,\r\n                            opacity: [0, 1],\r\n                            easing: \"easeOutExpo\",\r\n                            duration: 800,\r\n                            delay: (el, i) => 300 + 30 * i,\r\n                        },\r\n                        100\r\n                    );\r\n            }\r\n\r\n            window.onscroll = () => {\r\n                try {\r\n                    if (\r\n                        !document\r\n                            .getElementById(\"navbar\")!\r\n                            .classList.contains(\"nav-scrolled\")\r\n                    ) {\r\n                        document\r\n                            .getElementById(\"navbar\")!\r\n                            .classList.remove(\"nav-default\");\r\n                        anime({\r\n                            targets: \"#navbar\",\r\n                            background: \"#000000\",\r\n                            complete: () => {\r\n                                setTimeout(() => {\r\n                                    document\r\n                                        .getElementById(\"navbar\")!\r\n                                        .classList.add(\"nav-scrolled\");\r\n                                }, 100);\r\n                            },\r\n                        });\r\n                    }\r\n                } catch {}\r\n            };\r\n        }\r\n    }, [animation, setAnimation]);\r\n\r\n    const [login] = useLoginMutation();\r\n\r\n    const handler = async res => {\r\n        let response = await login({\r\n            variables: {\r\n                user_id: res.googleId,\r\n                email: res.profileObj.email,\r\n            },\r\n        });\r\n\r\n        setAccessToken(response.data?.login.accessToken!);\r\n        localStorage.setItem(\"iru5\", response.data?.login.refreshToken!);\r\n        window.location.reload();\r\n    };\r\n\r\n    const { signIn } = useGoogleLogin({\r\n        clientId:\r\n            \"36358700157-4ihpf9tj4bjf4k346b8pnubt4meim4j0.apps.googleusercontent.com\",\r\n        onSuccess: handler,\r\n    });\r\n\r\n    const logout = () => {\r\n        localStorage.setItem(\"iru5\", \"\");\r\n        setAccessToken(\"\");\r\n        window.location.reload();\r\n    };\r\n\r\n    const closeMobileSidenav = () => {\r\n        console.log(\"test\");\r\n        let sidenav = document.getElementById(\"mobile-sidenav\")!;\r\n\r\n        sidenav.classList.remove(\"opened\");\r\n        sidenav.style.transform = \"translateX(-100%)\";\r\n        document.body.classList.remove(\"stop-scrolling\");\r\n        anime\r\n            .timeline({\r\n                duration: 500,\r\n            })\r\n            .add({\r\n                targets: \"#close-icon\",\r\n                opacity: 0,\r\n                complete: () => {\r\n                    document\r\n                        .getElementById(\"close-icon\")!\r\n                        .classList.add(\"hide\");\r\n                    document.getElementById(\"menu\")!.classList.remove(\"hide\");\r\n                },\r\n            })\r\n            .add({\r\n                targets: \"#menu\",\r\n                opacity: 1,\r\n            });\r\n    };\r\n    return (\r\n        <>\r\n            <div id=\"mobile-sidenav\">\r\n                <ul className=\"container\">\r\n                    <li onClick={() => closeMobileSidenav()}>\r\n                        <a href=\"#/products\">Products</a>\r\n                    </li>\r\n                    <li>\r\n                        {checkAuth() ? (\r\n                            <a href=\"#/my-orders\">My Orders</a>\r\n                        ) : (\r\n                            // eslint-disable-next-line\r\n                            <a\r\n                                onClick={() => {\r\n                                    signIn();\r\n                                }}\r\n                            >\r\n                                My Orders\r\n                            </a>\r\n                        )}\r\n                    </li>\r\n\r\n                    {checkAuth() ? (\r\n                        <li onClick={() => closeMobileSidenav()}>\r\n                            <a href=\"#/\" onClick={() => logout()}>\r\n                                Logout\r\n                            </a>\r\n                        </li>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n            <nav id=\"navbar\" className=\"z-depth-0 nav-default\">\r\n                <i\r\n                    className=\"material-icons noselect show-on-small hide-on-med-and-up\"\r\n                    id=\"menu\"\r\n                    style={{\r\n                        maxWidth: \"50px\",\r\n                        display: \"inline-block\",\r\n                        marginLeft: \"15px\",\r\n                    }}\r\n                    onClick={() => {\r\n                        try {\r\n                            let sidenav =\r\n                                document.getElementById(\"mobile-sidenav\")!;\r\n\r\n                            sidenav.classList.add(\"opened\");\r\n                            sidenav.style.transform = \"translateX(0)\";\r\n                            document.body.classList.add(\"stop-scrolling\");\r\n                            anime\r\n                                .timeline({\r\n                                    duration: 500,\r\n                                })\r\n                                .add({\r\n                                    targets: \"#menu\",\r\n                                    opacity: 0,\r\n                                    complete: () => {\r\n                                        document\r\n                                            .getElementById(\"menu\")!\r\n                                            .classList.add(\"hide\");\r\n                                        document\r\n                                            .getElementById(\"close-icon\")!\r\n                                            .classList.remove(\"hide\");\r\n                                    },\r\n                                })\r\n                                .add({\r\n                                    targets: \"#close-icon\",\r\n                                    opacity: 1,\r\n                                });\r\n                        } catch {}\r\n                    }}\r\n                >\r\n                    menu\r\n                </i>\r\n\r\n                <i\r\n                    id=\"close-icon\"\r\n                    style={{\r\n                        maxWidth: \"50px\",\r\n                        opacity: 0,\r\n                        marginLeft: \"15px\",\r\n                    }}\r\n                    onClick={() => closeMobileSidenav()}\r\n                    className=\"material-icons hide noselect show-on-small hide-on-med-and-up\"\r\n                >\r\n                    close\r\n                </i>\r\n                <Logo />\r\n                <a href=\"#/my-cart\">\r\n                    <i\r\n                        className=\"material-icons noselect show-on-small hide-on-med-and-up\"\r\n                        id=\"cart\"\r\n                        style={{\r\n                            maxWidth: \"50px\",\r\n                            display: \"inline-block\",\r\n                            marginRight: \"15px\",\r\n                        }}\r\n                    >\r\n                        shopping_cart\r\n                    </i>\r\n                </a>\r\n\r\n                <ul\r\n                    className=\" noselect\"\r\n                    id=\"nav\"\r\n                    style={{\r\n                        left: \"50%\",\r\n                        transform: \"translateX(-50%)\",\r\n                        position: \"absolute\",\r\n                    }}\r\n                >\r\n                    <li\r\n                        onClick={() => {\r\n                            try {\r\n                                document\r\n                                    .getElementById(\"navbar\")!\r\n                                    .classList.remove(\"nav-default\");\r\n                                document\r\n                                    .getElementById(\"navbar\")!\r\n                                    .classList.add(\"nav-scrolled\");\r\n                                anime({\r\n                                    targets: \"nav\",\r\n                                    background: \"#000000\",\r\n                                    duration: 500,\r\n                                    easing: \"linear\",\r\n                                });\r\n                            } catch {}\r\n                        }}\r\n                    >\r\n                        <a href=\"#/products\">PRODUCTS</a>\r\n                    </li>\r\n\r\n                    <li\r\n                        onClick={() => {\r\n                            try {\r\n                                document\r\n                                    .getElementById(\"navbar\")!\r\n                                    .classList.remove(\"nav-default\");\r\n                                document\r\n                                    .getElementById(\"navbar\")!\r\n                                    .classList.add(\"nav-scrolled\");\r\n                                anime({\r\n                                    targets: \"nav\",\r\n                                    background: \"#000000\",\r\n                                    duration: 500,\r\n                                    easing: \"linear\",\r\n                                });\r\n                            } catch {}\r\n                        }}\r\n                    >\r\n                        {checkAuth() ? (\r\n                            <a href=\"#/my-orders\">MY ORDERS</a>\r\n                        ) : (\r\n                            // eslint-disable-next-line\r\n                            <a\r\n                                onClick={async () => {\r\n                                    await signIn();\r\n                                }}\r\n                            >\r\n                                MY ORDERS\r\n                            </a>\r\n                        )}\r\n                    </li>\r\n\r\n                    <li\r\n                        onClick={() => {\r\n                            try {\r\n                                document\r\n                                    .getElementById(\"navbar\")!\r\n                                    .classList.remove(\"nav-default\");\r\n                                document\r\n                                    .getElementById(\"navbar\")!\r\n                                    .classList.add(\"nav-scrolled\");\r\n                                setTimeout(() => {}, 0);\r\n                                // anime({\r\n                                //     targets: \"nav\",\r\n                                //     background: \"#000000\",\r\n                                //     duration: 500,\r\n                                //     easing: \"linear\",\r\n                                // });\r\n                            } catch {}\r\n                        }}\r\n                    >\r\n                        <a href=\"#/my-cart\">CART</a>\r\n                    </li>\r\n\r\n                    {checkAuth() ? (\r\n                        <li\r\n                            style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            <i\r\n                                id=\"desktop-logout\"\r\n                                className=\"material-icons right noselect\"\r\n                                style={{\r\n                                    marginRight: \"15%\",\r\n                                }}\r\n                                onClick={() => logout()}\r\n                            >\r\n                                exit_to_app\r\n                            </i>\r\n                        </li>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </ul>\r\n            </nav>\r\n        </>\r\n    );\r\n};\r\n\r\nconst SavedNavbar = () => {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    const [login] = useLoginMutation();\r\n\r\n    const handler = async res => {\r\n        let response = await login({\r\n            variables: {\r\n                user_id: res.googleId,\r\n                email: res.profileObj.email,\r\n            },\r\n        });\r\n\r\n        setAccessToken(response.data?.login.accessToken!);\r\n        localStorage.setItem(\"iru5\", response.data?.login.refreshToken!);\r\n        window.location.reload();\r\n    };\r\n\r\n    const { signIn } = useGoogleLogin({\r\n        clientId:\r\n            \"767129492168-gloagc4m640fgeegm6if58heehkpup7d.apps.googleusercontent.com\",\r\n        onSuccess: handler,\r\n    });\r\n\r\n    const logout = () => {\r\n        localStorage.setItem(\"iru5\", \"\");\r\n        setAccessToken(\"\");\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <div style={{ zIndex: 4 }} className=\"noselect\">\r\n                    <nav className=\"z-depth-2\">\r\n                        <div className=\"nav-wrapper\">\r\n                            <Logo />\r\n\r\n                            <a\r\n                                href=\"#/\"\r\n                                data-target=\"mobile-demo\"\r\n                                className=\"sidenav-trigger left\"\r\n                            >\r\n                                <i className=\"material-icons noselect\">menu</i>\r\n                            </a>\r\n\r\n                            <ul\r\n                                id=\"nav\"\r\n                                className=\"center\"\r\n                                style={{\r\n                                    left: \"50%\",\r\n                                    transform: \"translateX(-50%)\",\r\n                                    position: \"absolute\",\r\n                                }}\r\n                            >\r\n                                <li>\r\n                                    <a href=\"#/products\">PRODUCTS</a>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    {checkAuth() ? (\r\n                                        <a href=\"#/my-orders\">MY ORDERS</a>\r\n                                    ) : (\r\n                                        // eslint-disable-next-line\r\n                                        <a\r\n                                            onClick={async () => {\r\n                                                await signIn();\r\n                                            }}\r\n                                        >\r\n                                            MY ORDERS\r\n                                        </a>\r\n                                    )}\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <a href=\"#/my-cart\">CART</a>\r\n                                </li>\r\n                            </ul>\r\n                            {checkAuth() ? (\r\n                                <i\r\n                                    id=\"desktop-logout\"\r\n                                    className=\"material-icons right noselect\"\r\n                                    style={{ marginRight: \"15%\" }}\r\n                                    onClick={() => logout()}\r\n                                >\r\n                                    exit_to_app\r\n                                </i>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            <a\r\n                                href=\"#/my-cart\"\r\n                                className=\"right white-text\"\r\n                                style={{ color: \"#000\", marginRight: \"18px\" }}\r\n                            >\r\n                                <i className=\"material-icons\" id=\"mobile-cart\">\r\n                                    shopping_cart\r\n                                </i>\r\n                            </a>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n            </header>\r\n            {/* <ul\r\n                className=\"sidenav\"\r\n                id=\"mobile-demo\"\r\n                style={{\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.95)\",\r\n                    paddingTop: \"42px\",\r\n                }}\r\n            >\r\n                <li>\r\n                    <a\r\n                        style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                        href=\"#/products\"\r\n                    >\r\n                        Products\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    {checkAuth() ? (\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            href=\"#/my-orders\"\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    ) : (\r\n                        // eslint-disable-next-line\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            onClick={() => {\r\n                                signIn();\r\n                            }}\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    )}\r\n                </li>\r\n\r\n                <li>\r\n                    {checkAuth() ? (\r\n                        <a\r\n                            href=\"#/\"\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            onClick={() => logout()}\r\n                        >\r\n                            Logout\r\n                        </a>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </li>\r\n            </ul> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../../css/footer.scss\";\r\nimport { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport { useGetSocialsQuery } from \"../../generated/graphql\";\r\n\r\nconst Footer = () => {\r\n    const { data } = useGetSocialsQuery({\r\n        variables: {\r\n            component: \"footer\",\r\n        },\r\n    });\r\n\r\n    return (\r\n        <></>\r\n        // <div className=\"footer\">\r\n        //     <span>\r\n        //         {!!data && data.getSocials ? (\r\n        //             <>\r\n        //                 {data.getSocials.map((_val, i) => {\r\n        //                     if (data.getSocials[i].display) {\r\n        //                         return (\r\n        //                             <a\r\n        //                                 id=\"social-link\"\r\n        //                                 style={{ color: \"#f2f2f2\" }}\r\n        //                                 key={i}\r\n        //                             >\r\n        //                                 <SocialIcon\r\n        //                                     social_logo={\r\n        //                                         data.getSocials[i].social_logo\r\n        //                                     }\r\n        //                                 />\r\n        //                             </a>\r\n        //                         );\r\n        //                     } else {\r\n        //                         return null;\r\n        //                     }\r\n        //                 })}\r\n        //             </>\r\n        //         ) : null}\r\n        //     </span>\r\n        //     <span className=\"footer-copyright-text\">© 2021 Dazzle Crew</span>\r\n\r\n        //     <span\r\n        //         style={{\r\n        //             display: \"flex\",\r\n        //             flexDirection: \"column\",\r\n        //             justifyContent: \"center\",\r\n        //         }}\r\n        //     >\r\n        //         <span>\r\n        //             {!!data && data.getSocials ? (\r\n        //                 <>\r\n        //                     {data.getSocials.map((_val, i) => {\r\n        //                         if (data.getSocials[i].display) {\r\n        //                             return (\r\n        //                                 <a\r\n        //                                     id=\"social-link\"\r\n        //                                     key={i}\r\n        //                                     href={data.getSocials[i].social_url}\r\n        //                                 >\r\n        //                                     <SocialIcon\r\n        //                                         social_logo={\r\n        //                                             data.getSocials[i]\r\n        //                                                 .social_logo\r\n        //                                         }\r\n        //                                     />\r\n        //                                 </a>\r\n        //                             );\r\n        //                         } else {\r\n        //                             return null;\r\n        //                         }\r\n        //                     })}\r\n        //                 </>\r\n        //             ) : null}\r\n        //         </span>\r\n        //     </span>\r\n        // </div>\r\n    );\r\n};\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\nexport default Footer;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst Carousel = () => {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".carousel\");\r\n\r\n        M.Carousel.init(elems, {\r\n            fullWidth: true,\r\n            indicators: true,\r\n        });\r\n    });\r\n\r\n    setTimeout(() => {\r\n        try {\r\n            var elem = document.getElementById(\"carousel\")!;\r\n            let instance = M.Carousel.getInstance(elem);\r\n            instance.next();\r\n        } catch {}\r\n    }, 1000);\r\n\r\n    return (\r\n        <div id=\"carousel\" className=\"carousel bg-img\">\r\n            <a className=\"carousel-item\">\r\n                <img src=\"https://assets.bigcartel.com/theme_images/56236019/IMG_4077.JPG?auto=format&fit=max&w=1500\" />\r\n            </a>\r\n\r\n            <a className=\"carousel-item\">\r\n                <img src=\"https://assets.bigcartel.com/theme_images/60876288/lobelydriver.jpg?auto=format&fit=max&w=1500\" />\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Carousel;\r\n","import {\r\n    useGetProductsQuery,\r\n    useGetSectionsQuery,\r\n} from \"../../generated/graphql\";\r\nimport \"../../css/products.scss\";\r\nimport { useEffect } from \"react\";\r\nimport anime from \"animejs\";\r\nimport Carousel from \"../Carousel\";\r\n\r\nconst GetSections = () => {\r\n    const { data, loading } = useGetSectionsQuery();\r\n    let sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst Products = () => {\r\n    const { data, loading } = useGetProductsQuery();\r\n    const { sdata, sloading } = GetSections();\r\n\r\n    useEffect(() => {\r\n        if (!loading && !sloading) {\r\n            if (!!document.getElementById(\"products-grid\")) {\r\n                document\r\n                    .getElementById(\"products-grid\")!\r\n                    .classList.remove(\"hide\");\r\n            }\r\n            anime({\r\n                duration: function (_t, i) {\r\n                    return 900 + i * 75;\r\n                },\r\n                targets: \".products-grid .card-content\",\r\n                easing: \"easeOutExpo\",\r\n                // delay: function (t, i) {\r\n                //     return i * 50;\r\n                // },\r\n                opacity: { value: [0, 1], easing: \"linear\" },\r\n                scale: [0, 1],\r\n                delay: anime.stagger(150, { start: 100 }),\r\n            });\r\n            anime({\r\n                duration: function (_t, i) {\r\n                    return 900 + i * 75;\r\n                },\r\n                targets: \".products-grid .card\",\r\n                easing: \"easeOutExpo\",\r\n                // delay: function (t, i) {\r\n                //     return i * 50;\r\n                // },\r\n                opacity: { value: [0, 1], easing: \"linear\" },\r\n                scale: [0, 1],\r\n                delay: anime.stagger(150, { start: 100 }),\r\n            });\r\n        }\r\n    });\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Carousel />\r\n            <div\r\n                className=\"watermark\"\r\n                style={{ paddingLeft: \"10%\", paddingRight: \"10%\" }}\r\n            >\r\n                {!!sdata && sdata.getSections.length !== 0 ? (\r\n                    <>\r\n                        <h1\r\n                            className=\"center-align\"\r\n                            style={{\r\n                                marginBottom: \"60px\",\r\n                                fontWeight: 600,\r\n                            }}\r\n                        >\r\n                            Sections\r\n                        </h1>\r\n\r\n                        <div className=\"sections-grid\">\r\n                            {sdata.getSections.map((_val, i) => {\r\n                                let section = sdata.getSections[i];\r\n                                return (\r\n                                    <div\r\n                                        className=\"card z-depth-0 \"\r\n                                        style={{\r\n                                            margin: \"0px 8px 32px 8px\",\r\n                                        }}\r\n                                        key={i}\r\n                                    >\r\n                                        <a\r\n                                            className=\"\"\r\n                                            href={`#/view-section:${section.section_id}`}\r\n                                        >\r\n                                            <div className=\"container\">\r\n                                                <div className=\"card-image\">\r\n                                                    <img\r\n                                                        src={section.thumbnail}\r\n                                                        alt={section.name}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"card-content\">\r\n                                                <span className=\"card-title\">\r\n                                                    <h5 className=\"center-align\">\r\n                                                        {section.name}\r\n                                                    </h5>\r\n                                                </span>\r\n                                                <span\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        justifyContent:\r\n                                                            \"center\",\r\n                                                    }}\r\n                                                ></span>\r\n                                            </div>\r\n                                        </a>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </>\r\n                ) : null}\r\n\r\n                {!!data ? (\r\n                    <>\r\n                        <h1\r\n                            className=\"center-align\"\r\n                            style={{\r\n                                marginBottom: \"60px\",\r\n                                fontWeight: 600,\r\n                            }}\r\n                        >\r\n                            Products\r\n                        </h1>\r\n\r\n                        <div id=\"products-grid\" className=\"products-grid hide\">\r\n                            {data?.getProducts.map((_val, i) => {\r\n                                let product: any = data.getProducts[i];\r\n                                return (\r\n                                    <div className=\"card z-depth-0 \" key={i}>\r\n                                        <a\r\n                                            href={`#/product-details:${product.product_id}`}\r\n                                        >\r\n                                            <div className=\"container\">\r\n                                                <div className=\"card-image\">\r\n                                                    <img\r\n                                                        src={\r\n                                                            !product\r\n                                                                .images[0] ||\r\n                                                            !product.images[0]\r\n                                                                .img_url\r\n                                                                ? \"https://materializecss.com/images/sample-1.jpg\"\r\n                                                                : product\r\n                                                                      .images[0]\r\n                                                                      .img_url\r\n                                                        }\r\n                                                        alt={product.name}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"card-content\">\r\n                                                <span className=\"card-title\">\r\n                                                    <h5 className=\"center-align product-name\">\r\n                                                        {product.name}\r\n                                                    </h5>\r\n                                                </span>\r\n                                                <span\r\n                                                    className=\"product-price\"\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        justifyContent:\r\n                                                            \"center\",\r\n                                                    }}\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"product-price\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                        }}\r\n                                                    >\r\n                                                        $\r\n                                                        {Number(\r\n                                                            product.price / 100\r\n                                                        ).toFixed(2)}\r\n                                                    </p>\r\n                                                </span>\r\n                                            </div>\r\n                                        </a>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </>\r\n                ) : null}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { useGetUsersOrdersQuery } from \"../generated/graphql\";\r\nimport { useLocation } from \"react-router-dom\";\r\n// import anime from \"animejs\";\r\nimport { Sorting } from \"../Sorting\";\r\n\r\ninterface UserOrders {\r\n    products: [\r\n        {\r\n            product_id: number;\r\n            name: string;\r\n            desc: string;\r\n            price: number;\r\n            stock: number;\r\n            exp_date?: string;\r\n            quantityOrdered: number;\r\n            productSubtotal: number;\r\n            images: [\r\n                {\r\n                    img_id: number;\r\n                    img_url: string;\r\n                    index: number;\r\n                }\r\n            ];\r\n        }\r\n    ];\r\n    shipping: string;\r\n    order_total: number;\r\n    order_id: number;\r\n    tracking_num?: string;\r\n    coupon: string;\r\n    discount: string;\r\n    date_of_purchase: string;\r\n}\r\n\r\nconst calcSubtotals = (products: any[]) => {\r\n    let Subtotal: any = 0,\r\n        sTotal: any = 100;\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        Subtotal += products[i].productSubtotal!;\r\n        sTotal += products[i].quantityOrdered * 50;\r\n    }\r\n\r\n    let productsSubtotal = Number(Subtotal / 100).toFixed(2);\r\n\r\n    if (sTotal > 500) {\r\n        sTotal = 500;\r\n    }\r\n\r\n    let shippingTotal = Number(sTotal / 100).toFixed(2);\r\n\r\n    return { productsSubtotal, shippingTotal };\r\n};\r\n\r\nconst showDetails = (i, tmp) => {\r\n    // if (document.getElementById(`card-header-${i}`)!.clientHeight > 50)\r\n    if (\r\n        !document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.contains(\"hide\")\r\n    ) {\r\n        document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.add(\"hide\");\r\n\r\n        // anime({\r\n        //     targets: `.card-header-${i}`,\r\n        //     height: \"48.5px\",\r\n        //     easing: \"linear\",\r\n        //     duration: 400,\r\n        //     complete: () => {\r\n        //         setTimeout(() => {\r\n        //             document.getElementById(\r\n        //                 \"details-span\"\r\n        //             )!.style.pointerEvents = \"auto\";\r\n        //         }, 50);\r\n        //     },\r\n        // });\r\n    } else {\r\n        const { productsSubtotal, shippingTotal } = calcSubtotals(\r\n            tmp[i].products\r\n        );\r\n\r\n        document.getElementById(\r\n            `subtotal-${i}`\r\n        )!.innerHTML = `$${productsSubtotal}`;\r\n\r\n        document.getElementById(`tax-${i}`)!.innerHTML = `$${Number(\r\n            Number(productsSubtotal) * 0.095\r\n        ).toFixed(2)}`;\r\n\r\n        document.getElementById(\r\n            `shippingTotal-${i}`\r\n        )!.innerHTML = `$${shippingTotal}`;\r\n\r\n        document\r\n            .getElementById(`order-details-row-${i}`)!\r\n            .classList.remove(\"hide\");\r\n\r\n        // anime({\r\n        //     targets: `.card-header-${i}`,\r\n        //     height: \"215px\",\r\n        //     easing: \"linear\",\r\n        //     duration: 350,\r\n        //     complete: () => {\r\n        //         document\r\n        //             .getElementById(`order-details-row-${i}`)!\r\n        //             .classList.remove(\"hide\");\r\n\r\n        //         anime({\r\n        //             targets: `.order-details-${i} .el`,\r\n        //             opacity: [0, 1],\r\n        //             delay: anime.stagger(50),\r\n        //             complete: () => {\r\n        //                 setTimeout(() => {\r\n        //                     document.getElementById(\r\n        //                         \"details-span\"\r\n        //                     )!.style.pointerEvents = \"auto\";\r\n        //                 }, 15);\r\n        //             },\r\n        //         });\r\n        //     },\r\n        // });\r\n    }\r\n};\r\n\r\nconst UsersOrders = () => {\r\n    const location: any = useLocation();\r\n\r\n    const { sortByProp } = Sorting();\r\n\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetUsersOrdersQuery();\r\n\r\n    if (loading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!data) {\r\n        //redirect\r\n        return <></>;\r\n    }\r\n\r\n    let sortedOrders: [UserOrders] = sortByProp(\r\n        data.getUsersOrders,\r\n        \"order_id\",\r\n        true\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {!!sortedOrders ? (\r\n                <>\r\n                    <div className=\"container\" style={{ minHeight: \"70vh\" }}>\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                                marginTop: \"64px\",\r\n                            }}\r\n                        >\r\n                            <h3>Your Purchases</h3>\r\n                        </div>\r\n                        <>\r\n                            {sortedOrders.map((_val, i) => {\r\n                                let amountOff = Number(\r\n                                    (sortedOrders[i].order_total *\r\n                                        Number(\r\n                                            \"0.\" + sortedOrders[i].discount\r\n                                        )) /\r\n                                        100\r\n                                ).toFixed(2);\r\n\r\n                                let str, dateOfPurchase;\r\n                                if (sortedOrders[i].date_of_purchase) {\r\n                                    str = sortedOrders[\r\n                                        i\r\n                                    ].date_of_purchase.split(\" \");\r\n                                    dateOfPurchase = `${str[0]} ${str[1]} ${str[2]} ${str[3]}`;\r\n                                }\r\n\r\n                                let shipping = JSON.parse(\r\n                                    sortedOrders[i].shipping\r\n                                );\r\n                                return (\r\n                                    <div className=\"row z-depth-1\" key={i}>\r\n                                        <div\r\n                                            className=\"col s12\"\r\n                                            style={{ padding: \"0px\" }}\r\n                                        >\r\n                                            <div\r\n                                                className={`card-header card-header-${i} row`}\r\n                                                id={`card-header-${i}`}\r\n                                                style={{\r\n                                                    borderLeft:\r\n                                                        \"5px solid #9549c1\",\r\n                                                    paddingTop: \"13px\",\r\n                                                    paddingBottom: \"13px\",\r\n                                                    paddingRight: \"25px\",\r\n                                                    paddingLeft: \"20px\",\r\n                                                    margin: \"0px\",\r\n                                                    position: \"relative\",\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"col s7 m4\">\r\n                                                    <span\r\n                                                        style={{\r\n                                                            color: \"#1d252c\",\r\n                                                            paddingRight:\r\n                                                                \"1rem\",\r\n                                                            fontWeight: 700,\r\n                                                        }}\r\n                                                    >\r\n                                                        Order ID\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        CR-\r\n                                                        {\r\n                                                            sortedOrders[i]\r\n                                                                .order_id\r\n                                                        }\r\n                                                    </span>\r\n                                                </span>\r\n\r\n                                                <span className=\"hide-on-med-and-down col l3\">\r\n                                                    {sortedOrders[i]\r\n                                                        .date_of_purchase ? (\r\n                                                        <span>\r\n                                                            {dateOfPurchase}\r\n                                                        </span>\r\n                                                    ) : (\r\n                                                        <></>\r\n                                                    )}\r\n                                                </span>\r\n\r\n                                                <span className=\"bold col s5 m4\">\r\n                                                    <span>\r\n                                                        <span className=\"hide-on-small-only left\">\r\n                                                            $\r\n                                                            {Number(\r\n                                                                sortedOrders[i]\r\n                                                                    .order_total /\r\n                                                                    100\r\n                                                            ).toFixed(2)}{\" \"}\r\n                                                            {sortedOrders[i]\r\n                                                                .discount ? (\r\n                                                                <span className=\"hide-on-med-and-down\">\r\n                                                                    (\r\n                                                                    <span\r\n                                                                        style={{\r\n                                                                            color:\r\n                                                                                \"rgb(255, 0, 0)\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        -$\r\n                                                                        {\r\n                                                                            amountOff\r\n                                                                        }\r\n                                                                    </span>\r\n                                                                    )\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                <></>\r\n                                                            )}\r\n                                                        </span>\r\n                                                        <span\r\n                                                            id=\"details-span\"\r\n                                                            className=\"noselect right\"\r\n                                                            onClick={() => {\r\n                                                                // document.getElementById(\r\n                                                                //     \"details-span\"\r\n                                                                // )!.style.pointerEvents =\r\n                                                                //     \"none\";\r\n                                                                showDetails(\r\n                                                                    i,\r\n                                                                    sortedOrders\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            Details\r\n                                                        </span>\r\n                                                    </span>\r\n                                                </span>\r\n\r\n                                                <div\r\n                                                    className=\"row hide\"\r\n                                                    id={`order-details-row-${i}`}\r\n                                                    style={{\r\n                                                        marginTop: \"32px\",\r\n                                                    }}\r\n                                                >\r\n                                                    <div className=\"col s12 m5\">\r\n                                                        <span\r\n                                                            className={`order-details-${i}`}\r\n                                                        >\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Subtotal\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`subtotal-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Tax\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`tax-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <span className=\"left\">\r\n                                                                    Shipping\r\n                                                                </span>\r\n                                                                <span\r\n                                                                    className=\"right semi-bold\"\r\n                                                                    id={`shippingTotal-${i}`}\r\n                                                                ></span>\r\n                                                            </span>\r\n\r\n                                                            <>\r\n                                                                {!sortedOrders[\r\n                                                                    i\r\n                                                                ].coupon ? (\r\n                                                                    <></>\r\n                                                                ) : (\r\n                                                                    <span className=\"el\">\r\n                                                                        <br />\r\n                                                                        <div\r\n                                                                            className=\"divider\"\r\n                                                                            style={{\r\n                                                                                marginTop:\r\n                                                                                    \"4px\",\r\n                                                                                marginBottom:\r\n                                                                                    \"4px\",\r\n                                                                            }}\r\n                                                                        ></div>\r\n                                                                        <span className=\"left\">\r\n                                                                            Coupon(\r\n                                                                            {\r\n                                                                                sortedOrders[\r\n                                                                                    i\r\n                                                                                ]\r\n                                                                                    .coupon\r\n                                                                            }\r\n                                                                            )\r\n                                                                        </span>\r\n                                                                        <span className=\"right\">\r\n                                                                            {\r\n                                                                                sortedOrders[\r\n                                                                                    i\r\n                                                                                ]\r\n                                                                                    .discount\r\n                                                                            }\r\n                                                                            % (\r\n                                                                            <span className=\"red-text bold\">\r\n                                                                                -$\r\n                                                                                {\r\n                                                                                    amountOff\r\n                                                                                }\r\n                                                                            </span>\r\n                                                                            )\r\n                                                                        </span>\r\n                                                                    </span>\r\n                                                                )}\r\n                                                            </>\r\n\r\n                                                            <br />\r\n\r\n                                                            <span className=\"el\">\r\n                                                                <div\r\n                                                                    className=\"divider\"\r\n                                                                    style={{\r\n                                                                        marginTop:\r\n                                                                            \"4px\",\r\n                                                                        marginBottom:\r\n                                                                            \"4px\",\r\n                                                                    }}\r\n                                                                ></div>\r\n                                                                <span className=\"left\">\r\n                                                                    Order Total\r\n                                                                </span>\r\n                                                                <span className=\"right bold\">\r\n                                                                    $\r\n                                                                    {Number(\r\n                                                                        sortedOrders[\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .order_total /\r\n                                                                            100\r\n                                                                    ).toFixed(\r\n                                                                        2\r\n                                                                    )}\r\n                                                                </span>\r\n                                                            </span>\r\n                                                        </span>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col s12 m5 offset-m2\">\r\n                                                        <span\r\n                                                            className={`shipping-details-${i}`}\r\n                                                        >\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width:\r\n                                                                        \"100%\",\r\n                                                                    borderLeft:\r\n                                                                        \" 4px solid black\",\r\n                                                                    paddingLeft:\r\n                                                                        \"15px\",\r\n                                                                }}\r\n                                                            >\r\n                                                                <p className=\"bold\">\r\n                                                                    {!shipping ? (\r\n                                                                        <></>\r\n                                                                    ) : (\r\n                                                                        <>\r\n                                                                            {\r\n                                                                                shipping.name\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.line1\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.city\r\n                                                                            }\r\n                                                                            ,{\" \"}\r\n                                                                            {\r\n                                                                                shipping.state\r\n                                                                            }{\" \"}\r\n                                                                            {\r\n                                                                                shipping.postal_code\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.country\r\n                                                                            }\r\n                                                                        </>\r\n                                                                    )}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"divider\"></div>\r\n\r\n                                            <div\r\n                                                className=\"card-body\"\r\n                                                style={{\r\n                                                    backgroundColor: \"white\",\r\n                                                    zIndex: 0,\r\n                                                    position: \"relative\",\r\n                                                }}\r\n                                            >\r\n                                                {sortedOrders[i].products.map(\r\n                                                    (_val, j) => {\r\n                                                        return (\r\n                                                            <div\r\n                                                                className=\"row\"\r\n                                                                key={j}\r\n                                                            >\r\n                                                                <div className=\"col s12 m4\">\r\n                                                                    <img\r\n                                                                        alt=\"product\"\r\n                                                                        style={{\r\n                                                                            width:\r\n                                                                                \"100%\",\r\n                                                                        }}\r\n                                                                        src={\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .images[0]\r\n                                                                                .img_url\r\n                                                                        }\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        flexDirection:\r\n                                                                            \"column\",\r\n                                                                        justifyContent:\r\n                                                                            \"space-between\",\r\n                                                                        height:\r\n                                                                            \"100%\",\r\n                                                                        paddingLeft: 0,\r\n                                                                    }}\r\n                                                                    className=\"col m2 offset-m1 hide-on-small-only\"\r\n                                                                >\r\n                                                                    <p\r\n                                                                        className=\"flow-text\"\r\n                                                                        style={{\r\n                                                                            fontSize:\r\n                                                                                \"16px\",\r\n                                                                            fontWeight:\r\n                                                                                \"bold\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .name\r\n                                                                        }\r\n                                                                    </p>\r\n                                                                    <p className=\"hide-on-small-only\">\r\n                                                                        Qty:{\" \"}\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .quantityOrdered\r\n                                                                        }{\" \"}\r\n                                                                        ($\r\n                                                                        {Number(\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .productSubtotal /\r\n                                                                                100\r\n                                                                        ).toFixed(\r\n                                                                            2\r\n                                                                        )}\r\n                                                                        )\r\n                                                                    </p>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        justifyContent:\r\n                                                                            \"center\",\r\n                                                                    }}\r\n                                                                    className=\"col s12 hide-on-med-and-up\"\r\n                                                                >\r\n                                                                    <p\r\n                                                                        className=\"flow-text\"\r\n                                                                        style={{\r\n                                                                            fontSize:\r\n                                                                                \"16px\",\r\n                                                                            fontWeight:\r\n                                                                                \"bold\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .products[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .name\r\n                                                                        }\r\n                                                                    </p>\r\n                                                                </div>\r\n\r\n                                                                {j === 0 ? (\r\n                                                                    <>\r\n                                                                        <div className=\"col offset-m1 m3 hide-on-small-only\">\r\n                                                                            {!sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tracking_num ? (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        Order\r\n                                                                                        is\r\n                                                                                        being\r\n                                                                                        proccessed\r\n                                                                                    </p>\r\n                                                                                    <div\r\n                                                                                        style={{\r\n                                                                                            width:\r\n                                                                                                \"100%\",\r\n                                                                                            borderBottom:\r\n                                                                                                \" 4px solid #ff0000\",\r\n                                                                                        }}\r\n                                                                                    ></div>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        Shipped{\" \"}\r\n                                                                                        =&gt;{\" \"}\r\n                                                                                        <a\r\n                                                                                            href={`https://www.google.com/search?q=${sortedOrders[i].tracking_num}`}\r\n                                                                                        >\r\n                                                                                            {\r\n                                                                                                sortedOrders[\r\n                                                                                                    i\r\n                                                                                                ]\r\n                                                                                                    .tracking_num\r\n                                                                                            }\r\n                                                                                        </a>\r\n                                                                                    </p>\r\n                                                                                    <div\r\n                                                                                        style={{\r\n                                                                                            width:\r\n                                                                                                \"100%\",\r\n                                                                                            borderBottom:\r\n                                                                                                \" 4px solid green\",\r\n                                                                                        }}\r\n                                                                                    ></div>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </div>\r\n\r\n                                                                        <div\r\n                                                                            className=\"col s12 hide-on-med-and-up\"\r\n                                                                            style={{}}\r\n                                                                        >\r\n                                                                            {!sortedOrders[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tracking_num ? (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                            display:\r\n                                                                                                \"flex\",\r\n                                                                                            justifyContent:\r\n                                                                                                \"center\",\r\n                                                                                            marginBottom:\r\n                                                                                                \"32px\",\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                borderLeft:\r\n                                                                                                    \" 4px solid #ff0000\",\r\n                                                                                                paddingLeft:\r\n                                                                                                    \"10px\",\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            Order\r\n                                                                                            is\r\n                                                                                            being\r\n                                                                                            proccessed\r\n                                                                                        </span>\r\n                                                                                    </p>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    <p\r\n                                                                                        style={{\r\n                                                                                            fontWeight: 700,\r\n                                                                                            display:\r\n                                                                                                \"flex\",\r\n                                                                                            justifyContent:\r\n                                                                                                \"center\",\r\n                                                                                            marginBottom:\r\n                                                                                                \"32px\",\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                borderLeft:\r\n                                                                                                    \" 4px solid #008000\",\r\n                                                                                                paddingLeft:\r\n                                                                                                    \"10px\",\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            Shipped{\" \"}\r\n                                                                                            =&gt;{\" \"}\r\n                                                                                            <a\r\n                                                                                                href={`https://www.google.com/search?q=${sortedOrders[i].tracking_num}`}\r\n                                                                                            >\r\n                                                                                                {\r\n                                                                                                    sortedOrders[\r\n                                                                                                        i\r\n                                                                                                    ]\r\n                                                                                                        .tracking_num\r\n                                                                                                }\r\n                                                                                            </a>\r\n                                                                                        </span>\r\n                                                                                    </p>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                    </>\r\n                                                                ) : null}\r\n                                                                {sortedOrders[i]\r\n                                                                    .products\r\n                                                                    .length >\r\n                                                                    1 &&\r\n                                                                sortedOrders[i]\r\n                                                                    .products\r\n                                                                    .length -\r\n                                                                    1 !==\r\n                                                                    j ? (\r\n                                                                    <div\r\n                                                                        className=\"divider hide-on-med-and-up\"\r\n                                                                        style={{\r\n                                                                            marginLeft:\r\n                                                                                \"10%\",\r\n                                                                            width:\r\n                                                                                \"80%\",\r\n                                                                        }}\r\n                                                                    ></div>\r\n                                                                ) : (\r\n                                                                    <></>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        );\r\n                                                    }\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <h1>You haven't ordered anything yet</h1>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UsersOrders;\r\n","export const Sorting = () => {\r\n    //alphabetic sort\r\n    const sortByProp = (arr: any, prop: string, invert?: boolean) => {\r\n        let props = [] as any[];\r\n        arr.forEach((_val: any, i: any) => {\r\n            props[i] = arr[i][prop];\r\n        });\r\n\r\n        props.sort();\r\n        if (invert) {\r\n            props.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (arr[i][prop] !== props[i]) {\r\n                let tmp = arr.slice(j, j + 2);\r\n                tmp.reverse();\r\n                arr[j] = tmp[0];\r\n                arr[j + 1] = tmp[1];\r\n                j = j + 1;\r\n\r\n                if (j === arr.length - 1) {\r\n                    j = i;\r\n                }\r\n\r\n                if (!arr[arr.length - 1]) {\r\n                    // remove undef index sometimes introduced by tmp.reverse()\r\n                    arr.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invert) {\r\n            return arr;\r\n        } else {\r\n            return arr;\r\n        }\r\n    };\r\n\r\n    return {\r\n        sortByProp,\r\n    };\r\n};\r\n","import { Product } from \"../RootReducer\";\r\n\r\nexport const addProductToCart = (product: Product) => {\r\n    return {\r\n        type: \"ADD_PRODUCT_TO_CART\",\r\n        product,\r\n    };\r\n};\r\n\r\nexport const resetCart = () => {\r\n    return { type: \"RESET_CART\" };\r\n};\r\n\r\nexport const changeQuantityOnProduct = (\r\n    newQuantity: number,\r\n    productIndex: number\r\n) => {\r\n    return { type: \"CHANGE_QUANTITY_ON_PRODUCT\", newQuantity, productIndex };\r\n};\r\n","import { Redirect } from \"react-router\";\r\nimport {\r\n    useGetProductQuery,\r\n    useGetProductsOptionsQuery,\r\n} from \"../../generated/graphql\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addProductToCart } from \"../../redux/actions/userAction\";\r\nimport { useEffect, useState } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nconst GetProductOptions = () => {\r\n    var product_id;\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const { data, loading } = useGetProductsOptionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let odata = data,\r\n        oloading = loading;\r\n\r\n    return {\r\n        odata,\r\n        oloading,\r\n    };\r\n};\r\n\r\nconst ProductDetails = () => {\r\n    let product_id: number;\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    const { odata, oloading } = GetProductOptions();\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [option, setOption] = useState({\r\n        name: \"\",\r\n        option_id: 0,\r\n        option_price: 0,\r\n        option_stock: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n        elems = document.querySelectorAll(\".carousel\");\r\n        M.Carousel.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        if (!loading) {\r\n            elems = document.querySelectorAll(\".tooltipped\");\r\n            M.Tooltip.init(elems);\r\n            elems = document.querySelectorAll(\".carousel\");\r\n            M.Carousel.init(elems);\r\n\r\n            elems = document.querySelectorAll(\".dropdown-trigger\");\r\n            M.Dropdown.init(elems);\r\n            if (!!data && !!document.getElementById(\"product-desc\")) {\r\n                document.getElementById(\"product-desc\")!.innerHTML =\r\n                    data.getProduct.desc;\r\n                document.getElementById(\"product-desc-m\")!.innerHTML =\r\n                    data.getProduct.desc;\r\n            }\r\n            // (stock * 100)/ org_stock\r\n            let percent = 50;\r\n            if (!data || !data!.getProduct.org_stock) {\r\n                percent = 100;\r\n            } else {\r\n                if (option.option_stock !== 0) {\r\n                    percent =\r\n                        (option.option_stock * 100) /\r\n                        data!.getProduct.org_stock;\r\n                } else {\r\n                    percent =\r\n                        (data!.getProduct.stock * 100) /\r\n                        data!.getProduct.org_stock;\r\n                }\r\n\r\n                if (percent > 100) {\r\n                    percent = 100;\r\n                }\r\n            }\r\n\r\n            anime({\r\n                targets: \".filler\",\r\n                width: [\"0%\", `${percent}%`],\r\n                easing: \"easeInOutExpo\",\r\n            });\r\n\r\n            if (!document.getElementById(\"product-img\")) {\r\n            } else {\r\n                if (data?.getProduct.stock === 0) {\r\n                    document.getElementById(\"product-img\")!.style.opacity =\r\n                        \"0.7\";\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (loading || oloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!data || error || !odata) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    let product: any = data!.getProduct;\r\n\r\n    // setTimeout(() => {\r\n    //     var instance = M.Carousel.getInstance(\r\n    //         document.getElementById(\"carousel-1\")!\r\n    //     );\r\n    //     instance.next();\r\n    // }, 5000);\r\n\r\n    return (\r\n        <div style={{ marginTop: \"95px\" }}>\r\n            <h2 className=\"center-align\">{product.name}</h2>\r\n            <h6 className=\"center-align\">\r\n                {product.stock === 0 ? (\r\n                    <span style={{ color: \"#ff0000\", fontWeight: \"bold\" }}>\r\n                        SOLD OUT\r\n                    </span>\r\n                ) : (\r\n                    <>\r\n                        {odata.getProductsOptions.length === 0 ? (\r\n                            <>${Number(product.price / 100).toFixed(2)} </>\r\n                        ) : (\r\n                            <>\r\n                                {option.option_price ? (\r\n                                    <span\r\n                                        className=\"option-price-id\"\r\n                                        id=\"option-price-id\"\r\n                                    >\r\n                                        $\r\n                                        {Number(\r\n                                            option.option_price / 100\r\n                                        ).toFixed(2)}{\" \"}\r\n                                    </span>\r\n                                ) : (\r\n                                    <span style={{ opacity: 0 }}>$0.00</span>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </h6>\r\n\r\n            <div className=\"row noselect\">\r\n                <div\r\n                    className=\"col s10 offset-s1 m4 offset-m2\"\r\n                    style={{ display: \"flex\", justifyContent: \"end\" }}\r\n                >\r\n                    {data.getProduct.images!.length > 1 ? (\r\n                        <>\r\n                            <div\r\n                                id=\"carousel-1\"\r\n                                className=\"carousel carousel-slider hide-on-small-only\"\r\n                            >\r\n                                {!data.getProduct.images ? (\r\n                                    <></>\r\n                                ) : (\r\n                                    <>\r\n                                        {data.getProduct.images.map(\r\n                                            (_val, i) => {\r\n                                                return (\r\n                                                    // eslint-disable-next-line\r\n                                                    <a\r\n                                                        className=\"carousel-item noselect\"\r\n                                                        key={i}\r\n                                                    >\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"12.5%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance =\r\n                                                                    M.Carousel.getInstance(\r\n                                                                        document.getElementById(\r\n                                                                            \"carousel-1\"\r\n                                                                        )!\r\n                                                                    );\r\n                                                                instance.prev();\r\n                                                            }}\r\n                                                        ></span>\r\n\r\n                                                        <img\r\n                                                            alt=\"product\"\r\n                                                            style={{\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                width: \"75%\",\r\n                                                            }}\r\n                                                            src={\r\n                                                                product.images[\r\n                                                                    i\r\n                                                                ].img_url || \"\"\r\n                                                            }\r\n                                                        />\r\n\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"350px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance =\r\n                                                                    M.Carousel.getInstance(\r\n                                                                        document.getElementById(\r\n                                                                            \"carousel-1\"\r\n                                                                        )!\r\n                                                                    );\r\n                                                                instance.next();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                    </a>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div\r\n                                id=\"carousel-2\"\r\n                                className=\"carousel carousel-slider show-on-small-only hide-on-med-and-up\"\r\n                                style={{ height: \"350px\" }}\r\n                            >\r\n                                {!data.getProduct.images ? (\r\n                                    <></>\r\n                                ) : (\r\n                                    <>\r\n                                        {data.getProduct.images.map(\r\n                                            (_val, i) => {\r\n                                                return (\r\n                                                    // eslint-disable-next-line\r\n                                                    <a\r\n                                                        className=\"carousel-item noselect\"\r\n                                                        key={i}\r\n                                                        style={{\r\n                                                            maxHeight: \"250px\",\r\n                                                            minHeight: \"100px\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"12.5%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance =\r\n                                                                    M.Carousel.getInstance(\r\n                                                                        document.getElementById(\r\n                                                                            \"carousel-2\"\r\n                                                                        )!\r\n                                                                    );\r\n                                                                instance.prev();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                        <img\r\n                                                            alt=\"product\"\r\n                                                            style={{\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                width: \"80%\",\r\n                                                            }}\r\n                                                            src={\r\n                                                                product.images[\r\n                                                                    i\r\n                                                                ].img_url || \"\"\r\n                                                            }\r\n                                                        />\r\n                                                        <span\r\n                                                            style={{\r\n                                                                display:\r\n                                                                    \"inline-block\",\r\n                                                                maxHeight:\r\n                                                                    \"250px\",\r\n                                                                height: \"100%\",\r\n                                                                width: \"10%\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                var instance =\r\n                                                                    M.Carousel.getInstance(\r\n                                                                        document.getElementById(\r\n                                                                            \"carousel-2\"\r\n                                                                        )!\r\n                                                                    );\r\n                                                                instance.next();\r\n                                                            }}\r\n                                                        ></span>\r\n                                                    </a>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div>\r\n                                <img\r\n                                    id=\"product-img\"\r\n                                    src={\r\n                                        !product.images[0]\r\n                                            ? \"https://materializecss.com/images/sample-1.jpg\"\r\n                                            : product.images[0].img_url\r\n                                    }\r\n                                    alt=\"product\"\r\n                                    style={{ maxWidth: \"100%\" }}\r\n                                />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div className=\"col s10 offset-s1 m3 offset-m1\">\r\n                    <div\r\n                        style={{ marginBottom: \"16px\" }}\r\n                        className=\"hide-on-small-only\"\r\n                        id=\"product-desc\"\r\n                    ></div>\r\n                    <div className=\"centered\">\r\n                        <div\r\n                            style={{ marginBottom: \"16px\", marginTop: \"16px\" }}\r\n                            className=\"show-on-small hide-on-med-and-up\"\r\n                            id=\"product-desc-m\"\r\n                        ></div>\r\n                    </div>\r\n                    <div\r\n                        className=\"divider\"\r\n                        style={{ marginBottom: \"16px\" }}\r\n                    ></div>\r\n                    {/* eslint-disable-next-line */}\r\n\r\n                    {odata.getProductsOptions.length === 0 ? (\r\n                        <>\r\n                            <a\r\n                                className=\"tooltipped\"\r\n                                data-position=\"right\"\r\n                                data-tooltip={`${product.stock} remaining`}\r\n                            >\r\n                                <div\r\n                                    className=\"hide-on-small-only\"\r\n                                    style={{\r\n                                        height: \"55px\",\r\n                                        width: \"100%\",\r\n                                        border: \"1px solid black\",\r\n                                        marginBottom: \"16px\",\r\n                                    }}\r\n                                >\r\n                                    <span\r\n                                        className=\"filler\"\r\n                                        style={{\r\n                                            display: \"inline-block\",\r\n                                            height: \"100%\",\r\n                                            backgroundColor: \"#ff86f2\",\r\n                                        }}\r\n                                    ></span>\r\n                                </div>\r\n                            </a>\r\n                        </>\r\n                    ) : (\r\n                        <a\r\n                            className=\"tooltipped\"\r\n                            data-position=\"right\"\r\n                            data-tooltip={`${option.option_stock} remaining`}\r\n                        >\r\n                            <div\r\n                                className=\"hide-on-small-only \"\r\n                                style={{\r\n                                    height: \"55px\",\r\n                                    width: \"100%\",\r\n                                    border: \"1px solid black\",\r\n                                    marginBottom: \"16px\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    className=\"option-bar-filler\"\r\n                                    style={{\r\n                                        display: \"inline-block\",\r\n                                        height: \"100%\",\r\n                                        backgroundColor: \"#ff86f2\",\r\n                                    }}\r\n                                ></span>\r\n                            </div>\r\n                        </a>\r\n                    )}\r\n\r\n                    {product.stock === 0 ? (\r\n                        <></>\r\n                    ) : (\r\n                        <>\r\n                            {odata.getProductsOptions.length !== 0 ? (\r\n                                <>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn select\"\r\n                                        data-target=\"dropdown1\"\r\n                                    >\r\n                                        <>\r\n                                            {\" \"}\r\n                                            {option.name ? (\r\n                                                <span>{option.name}</span>\r\n                                            ) : (\r\n                                                <>SELECT OPTION</>\r\n                                            )}\r\n                                        </>\r\n                                    </a>\r\n                                    <button\r\n                                        id=\"add-cart-btn\"\r\n                                        className=\"btn disabled chewy\"\r\n                                        onClick={() => {\r\n                                            if (!!option) {\r\n                                                M.toast({\r\n                                                    html: `Added to cart,&nbsp;<a href=\"#/my-cart\">Click here to enter cart!</a>`,\r\n                                                });\r\n                                                let tmp = product;\r\n                                                tmp.option = option.name;\r\n                                                tmp.option_id =\r\n                                                    option.option_id;\r\n                                                tmp.option_price =\r\n                                                    option.option_price;\r\n                                                dispatch(addProductToCart(tmp));\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        Add to Cart\r\n                                    </button>\r\n                                </>\r\n                            ) : (\r\n                                <button\r\n                                    id=\"add-cart-btn\"\r\n                                    className=\"btn chewy\"\r\n                                    onClick={() => {\r\n                                        M.toast({\r\n                                            html: `Added to cart,&nbsp;<a href=\"#/my-cart\">Click here to enter cart!</a>`,\r\n                                        });\r\n                                        dispatch(addProductToCart(product));\r\n                                    }}\r\n                                >\r\n                                    Add to Cart\r\n                                </button>\r\n                            )}\r\n                        </>\r\n                    )}\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <>\r\n                            {odata.getProductsOptions.map((_val, i) => {\r\n                                return (\r\n                                    <li\r\n                                        key={i}\r\n                                        style={{\r\n                                            backgroundColor: \"black\",\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            let percent = 100;\r\n\r\n                                            percent =\r\n                                                odata.getProductsOptions[i]\r\n                                                    .stock;\r\n\r\n                                            if (percent > 100) {\r\n                                                percent = 100;\r\n                                            }\r\n\r\n                                            anime({\r\n                                                targets: \".option-bar-filler\",\r\n                                                width: [\"0%\", `${percent}%`],\r\n                                                easing: \"easeInOutExpo\",\r\n                                            });\r\n\r\n                                            setOption({\r\n                                                name: odata.getProductsOptions[\r\n                                                    i\r\n                                                ].name,\r\n                                                option_id:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .option_id,\r\n                                                option_price:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .price,\r\n                                                option_stock:\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .stock,\r\n                                            });\r\n\r\n                                            document\r\n                                                .getElementById(\"add-cart-btn\")!\r\n                                                .classList.remove(\"disabled\");\r\n                                        }}\r\n                                    >\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <span\r\n                                            className=\"center\"\r\n                                            style={{\r\n                                                textTransform: \"capitalize\",\r\n                                            }}\r\n                                        >\r\n                                            <a\r\n                                                className=\"chewy bold\"\r\n                                                style={{\r\n                                                    fontSize: \"28px\",\r\n                                                    color: \"white\",\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    odata.getProductsOptions[i]\r\n                                                        .name\r\n                                                }\r\n                                            </a>\r\n                                        </span>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useGetProductsByIdsQuery } from \"../../generated/graphql\";\r\nimport {\r\n    changeQuantityOnProduct,\r\n    resetCart,\r\n} from \"../../redux/actions/userAction\";\r\nimport anime from \"animejs\";\r\n\r\nconst Cart = () => {\r\n    const products = useSelector(state => state.productsInCart) || [];\r\n\r\n    const product_ids = [] as number[];\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        let tmp = true;\r\n        for (let j = 0; j < product_ids.length; j++) {\r\n            if (product_ids[j] === products[i].product_id) {\r\n                tmp = false;\r\n            }\r\n        }\r\n\r\n        if (tmp) {\r\n            product_ids.push(products[i].product_id);\r\n        }\r\n    }\r\n\r\n    const products_str = JSON.stringify(product_ids);\r\n\r\n    const { data, loading, error } = useGetProductsByIdsQuery({\r\n        variables: {\r\n            products_str,\r\n        },\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const [state, setState] = useState({\r\n        refresh: false,\r\n        quantities: [],\r\n    });\r\n\r\n    const [total, setTotal] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (!!products) {\r\n            var tmp_total = 0;\r\n            for (let i = 0; i < products.length; i++) {\r\n                let product = products[i];\r\n                if (!product.option || product.option.length === 0) {\r\n                    if (state.quantities[i]) {\r\n                        tmp_total += products[i].price * state.quantities[i];\r\n                    } else {\r\n                        tmp_total += products[i].price * products[i].quantity;\r\n                    }\r\n                } else {\r\n                    if (state.quantities[i]) {\r\n                        tmp_total +=\r\n                            products[i].option_price * state.quantities[i];\r\n                    } else {\r\n                        tmp_total +=\r\n                            products[i].option_price * products[i].quantity;\r\n                    }\r\n                }\r\n            }\r\n\r\n            setTotal(tmp_total);\r\n            // setState({ ...state, refresh: !state.refresh });\r\n        }\r\n    });\r\n\r\n    if (loading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (!!error) {\r\n        dispatch(resetCart());\r\n\r\n        return (\r\n            <div style={{ minHeight: \"70vh\" }}>\r\n                <div\r\n                    className=\"row\"\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                >\r\n                    <h5>Oops this is embarrasing</h5>\r\n                </div>\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"faq-wrapper\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                borderBottom: \" 4px solid #ff0000\",\r\n                            }}\r\n                        ></div>\r\n\r\n                        <h3 style={{ fontWeight: 550 }}>An error occured</h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong>{\" \"}\r\n                            Please try again later. If error persist contact us\r\n                            via instagram or email.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n        return (\r\n            <div style={{ minHeight: \"80vh\", marginTop: 90 }}>\r\n                <h3 className=\"center-align\">Your Shopping Cart Is Empty!</h3>\r\n                <a href=\"#/products\">\r\n                    <h6\r\n                        className=\"center-align\"\r\n                        style={{ marginBottom: \"16px\" }}\r\n                    >\r\n                        Click me to start shopping\r\n                    </h6>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!!data) {\r\n        for (let i = 0; i < products.length; i++) {\r\n            // cart item validation\r\n            for (let j = 0; j < data.getProductsByIds.length; j++) {\r\n                if (\r\n                    products[i].product_id ===\r\n                    data.getProductsByIds[j].product_id\r\n                ) {\r\n                    if (!products[i].option) {\r\n                        if (\r\n                            products[i].quantity >\r\n                            data.getProductsByIds[j].stock\r\n                        ) {\r\n                            // edit the item\r\n                            products[i].name = data.getProductsByIds[j].name;\r\n                            products[i].price = data.getProductsByIds[j].price;\r\n                            products[i].quantity =\r\n                                data.getProductsByIds[j].stock;\r\n                            dispatch(\r\n                                changeQuantityOnProduct(\r\n                                    data.getProductsByIds[j].stock,\r\n                                    i\r\n                                )\r\n                            );\r\n                        }\r\n                    } else {\r\n                        if (\r\n                            !!data.getProductsByIds[j] &&\r\n                            !!data.getProductsByIds[j].options\r\n                        ) {\r\n                            for (\r\n                                let ii = 0;\r\n                                ii < data.getProductsByIds[j].options!.length;\r\n                                ii++\r\n                            ) {\r\n                                if (\r\n                                    products[i].option_id ===\r\n                                    data.getProductsByIds[j].options![ii]\r\n                                        .option_id\r\n                                ) {\r\n                                    //check stock\r\n                                    if (\r\n                                        products[i].quantity >\r\n                                        data.getProductsByIds[j].options![ii]\r\n                                            .stock\r\n                                    ) {\r\n                                        dispatch(\r\n                                            changeQuantityOnProduct(\r\n                                                data.getProductsByIds[j]\r\n                                                    .options![ii].stock,\r\n                                                i\r\n                                            )\r\n                                        );\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ minHeight: \"80vh\", marginTop: 65 }}>\r\n            <div\r\n                className=\"container\"\r\n                style={{ backgroundColor: \"white\", minHeight: \"100vh\" }}\r\n            >\r\n                <h3 className=\"center-align\" style={{ fontWeight: \"bold\" }}>\r\n                    Subtotal\r\n                </h3>\r\n                <h5 className=\"center-align\" style={{ fontWeight: 600 }}>\r\n                    ${Number(total / 100).toFixed(2)}\r\n                </h5>\r\n\r\n                {products.map((_val, i) => {\r\n                    return (\r\n                        <div\r\n                            id={`product-${i}`}\r\n                            key={i}\r\n                            className={`product-${i} product row`}\r\n                        >\r\n                            <div className={` col s12 m4 l4`}>\r\n                                <div className=\"centered\">\r\n                                    <img\r\n                                        alt=\"product\"\r\n                                        src={products[i].images[0].img_url}\r\n                                        style={{ width: \"75%\", height: \"75%\" }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s12 m3\">\r\n                                <h5 className=\"center-align hide-on-small-only\">\r\n                                    {products[i].name}{\" \"}\r\n                                    {!products[i].option ? (\r\n                                        <></>\r\n                                    ) : (\r\n                                        <span className=\"bold\">\r\n                                            ({products[i].option})\r\n                                        </span>\r\n                                    )}\r\n                                </h5>\r\n\r\n                                <h6 className=\"center-align show-on-small hide-on-med-and-up\">\r\n                                    {products[i].name}{\" \"}\r\n                                    <span className=\"bold\">\r\n                                        $\r\n                                        {!products[i].option_price ? (\r\n                                            <span>\r\n                                                {Number(\r\n                                                    products[i].price / 100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        ) : (\r\n                                            <span>\r\n                                                {Number(\r\n                                                    products[i].option_price /\r\n                                                        100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        )}{\" \"}\r\n                                        {!products[i].option ? (\r\n                                            <></>\r\n                                        ) : (\r\n                                            <>({products[i].option})</>\r\n                                        )}\r\n                                    </span>\r\n                                </h6>\r\n                            </div>\r\n\r\n                            <div\r\n                                className=\"col s4 offset-s4 offset-m1 m2 l2\"\r\n                                style={{\r\n                                    padding: \"0\",\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"center\",\r\n                                }}\r\n                            >\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={\r\n                                        state.quantities[i] ||\r\n                                        state.quantities[i] === 0\r\n                                            ? state.quantities[i]\r\n                                            : products[i].quantity\r\n                                    }\r\n                                    minLength={0}\r\n                                    maxLength={2}\r\n                                    pattern=\"\\D\"\r\n                                    onBlur={e => {\r\n                                        dispatch(\r\n                                            changeQuantityOnProduct(\r\n                                                Number(e.target.value),\r\n                                                i\r\n                                            )\r\n                                        );\r\n\r\n                                        if (e.target.value === \"0\") {\r\n                                            let tmp = state.quantities;\r\n                                            tmp.splice(i, 1);\r\n\r\n                                            anime({\r\n                                                duration: 400,\r\n                                                targets: `.product-${i}`,\r\n                                                easing: \"easeOutExpo\",\r\n                                                opacity: {\r\n                                                    value: [1, 0],\r\n                                                    easing: \"linear\",\r\n                                                },\r\n                                                complete: function () {\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        quantities: tmp,\r\n                                                        refresh: !state.refresh,\r\n                                                    });\r\n                                                    if (\r\n                                                        !!document.getElementById(\r\n                                                            `product-${i}`\r\n                                                        )\r\n                                                    ) {\r\n                                                        document.getElementById(\r\n                                                            `product-${i}`\r\n                                                        )!.style.opacity = \"1\";\r\n                                                    }\r\n                                                },\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                    onChange={e => {\r\n                                        let tmp: any = state.quantities;\r\n\r\n                                        if (!e.target.value) {\r\n                                            tmp[i] = 0;\r\n                                            setState({\r\n                                                ...state,\r\n                                                quantities: tmp,\r\n                                            });\r\n                                        }\r\n\r\n                                        if (e.target.value.match(/\\d/g)) {\r\n                                            //check if value is less than stock\r\n                                            let foo = true;\r\n                                            for (\r\n                                                let j = 0;\r\n                                                j <\r\n                                                data!.getProductsByIds.length;\r\n                                                j++\r\n                                            ) {\r\n                                                if (\r\n                                                    data?.getProductsByIds[j]\r\n                                                        .options\r\n                                                ) {\r\n                                                    if (\r\n                                                        data?.getProductsByIds[\r\n                                                            j\r\n                                                        ].product_id ===\r\n                                                        products[i].product_id\r\n                                                    ) {\r\n                                                        for (\r\n                                                            let z = 0;\r\n                                                            z <\r\n                                                            data\r\n                                                                ?.getProductsByIds[\r\n                                                                j\r\n                                                            ].options!.length;\r\n                                                            z++\r\n                                                        ) {\r\n                                                            if (\r\n                                                                products[i]\r\n                                                                    .option_id ===\r\n                                                                data\r\n                                                                    ?.getProductsByIds[\r\n                                                                    j\r\n                                                                ].options![z]\r\n                                                                    .option_id\r\n                                                            ) {\r\n                                                                if (\r\n                                                                    Number(\r\n                                                                        e.target\r\n                                                                            .value\r\n                                                                    ) >\r\n                                                                    data\r\n                                                                        ?.getProductsByIds[\r\n                                                                        j\r\n                                                                    ].options![\r\n                                                                        z\r\n                                                                    ].stock\r\n                                                                ) {\r\n                                                                    foo = false;\r\n                                                                    tmp[\r\n                                                                        i\r\n                                                                    ] = Number(\r\n                                                                        data\r\n                                                                            ?.getProductsByIds[\r\n                                                                            j\r\n                                                                        ]\r\n                                                                            .options![\r\n                                                                            z\r\n                                                                        ].stock\r\n                                                                    );\r\n                                                                    setState({\r\n                                                                        ...state,\r\n                                                                        quantities: tmp,\r\n                                                                    });\r\n                                                                    break;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                            if (foo) {\r\n                                                tmp[i] = Number(e.target.value);\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    quantities: tmp,\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    style={{\r\n                                        textAlign: \"center\",\r\n                                        border: \"1px solid #000\",\r\n                                        height: \"56px\",\r\n                                        width: \"56px\",\r\n                                    }}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col hide-on-small-only m1 l2 bold\">\r\n                                $\r\n                                {!products[i].option_price ? (\r\n                                    <span>\r\n                                        {Number(\r\n                                            products[i].price / 100\r\n                                        ).toFixed(2)}\r\n                                    </span>\r\n                                ) : (\r\n                                    <span>\r\n                                        {Number(\r\n                                            products[i].option_price / 100\r\n                                        ).toFixed(2)}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginBottom: \"40px\",\r\n                    }}\r\n                >\r\n                    <a className=\"btn checkout-btn\" href=\"#/checkout\">\r\n                        checkout\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n","const Paid = () => {\r\n    return (\r\n        <div style={{ minHeight: \"80vh\" }}>\r\n            <div className=\"centered\">\r\n                <h3>Success</h3>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        width: \"50%\",\r\n                        borderBottom: \" 4px solid #ff0000\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n\r\n            <div className=\"centered\">\r\n                <div className=\"faq-wrapper\">\r\n                    <blockquote\r\n                        style={{\r\n                            borderLeft: \"5px solid black\",\r\n                            marginTop: \"64px\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            We Received your order.\r\n                        </h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong>{\" \"}\r\n                            Please check your Paypal, Email, or the My-Orders\r\n                            page for updates.\r\n                        </p>\r\n                    </blockquote>\r\n\r\n                    <blockquote\r\n                        style={{\r\n                            borderLeft: \"5px solid #ff0000\",\r\n                            marginTop: \"64px\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ fontWeight: 550 }} className=\"noselect\">\r\n                            Thank you for shopping with Us! ٩(\r\n                            <span style={{ color: \"pink\" }}>♡</span>ε\r\n                            <span style={{ color: \"pink\" }}>♡</span>\r\n                            )۶\r\n                        </h3>\r\n                    </blockquote>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Paid;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    useCheckoutMutation,\r\n    useGetCurrUserQuery,\r\n    useValidateCouponMutation,\r\n    usePaypalCheckoutMutation,\r\n    useAddPaypalOrderMutation,\r\n    useGetShippingCostQuery,\r\n} from \"../../generated/graphql\";\r\nimport { CardElement } from \"@stripe/react-stripe-js\";\r\nimport { Redirect } from \"react-router\";\r\nimport { checkAuth } from \"../../CheckAuth\";\r\nimport { resetCart } from \"../../redux/actions/userAction\";\r\nimport Paid from \"./Paid\";\r\nimport \"../../css/checkout.scss\";\r\n\r\nfunction CardSection() {\r\n    const CARD_ELEMENT_OPTIONS: any = {\r\n        iconStyle: \"solid\",\r\n        hidePostalCode: true,\r\n        style: {\r\n            base: {\r\n                iconColor: \"rgb(240, 57, 122)\",\r\n                color: \"rgb(240, 57, 122)\",\r\n                fontSize: \"16px\",\r\n                fontFamily: '\"Open Sans\", sans-serif',\r\n                fontSmoothing: \"antialiased\",\r\n                \"::placeholder\": {\r\n                    color: \"#CFD7DF\",\r\n                },\r\n            },\r\n\r\n            invalid: {\r\n                color: \"#e5424d\",\r\n                \":focus\": {\r\n                    color: \"#303238\",\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return <CardElement options={CARD_ELEMENT_OPTIONS} />;\r\n}\r\n\r\nconst Checkout = props => {\r\n    const { data } = useGetCurrUserQuery();\r\n    const products = useSelector(state => state.productsInCart);\r\n\r\n    const products_str = JSON.stringify(products);\r\n\r\n    const sh_res = useGetShippingCostQuery({\r\n        variables: {\r\n            US_ORDER: true,\r\n            products: products_str,\r\n        },\r\n    });\r\n\r\n    const [checkout] = useCheckoutMutation();\r\n    const [validateCoupon] = useValidateCouponMutation();\r\n    const [paypalCheckout] = usePaypalCheckoutMutation();\r\n    const [addPaypalOrder] = useAddPaypalOrderMutation();\r\n    const [discountPH, setDiscountPH] = useState(0);\r\n    const dispatch = useDispatch();\r\n    const [coupon, setCoupon] = useState(\"\");\r\n    const [subtotal, setSubtotal] = useState(-1);\r\n    const [Total, setTotal] = useState(-1);\r\n    const [shipping, setShipping] = useState(-1);\r\n    const [billing, setBilling] = useState({\r\n        refresh: false,\r\n        email: \"\",\r\n        name: \"\",\r\n        address: {\r\n            city: \"\",\r\n            line1: \"\",\r\n            zip: \"\",\r\n            state: \"\",\r\n            country: \"\",\r\n        },\r\n    });\r\n\r\n    const [paidFor, setPaidFor] = useState(false);\r\n    const [err, setError] = useState(\"\");\r\n    const [US_ORDER, SET_US_ORDER] = useState(true);\r\n    const [address, setAddress] = useState({\r\n        city: \"\",\r\n        line1: \"\",\r\n        zip: \"\",\r\n        state: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        country: \"\",\r\n    });\r\n\r\n    const paypalRef = useRef();\r\n    const couponRef: any = useRef();\r\n    couponRef.current = coupon;\r\n\r\n    useEffect(() => {\r\n        let tmp: any = paypalRef.current;\r\n        var elems = document.querySelectorAll(\".autocomplete\");\r\n        M.Autocomplete.init(elems, {\r\n            data: {\r\n                Alabama: null,\r\n                Alaska: null,\r\n                Arizona: null,\r\n                Arkansas: null,\r\n                California: null,\r\n                Colorado: null,\r\n                Connecticut: null,\r\n                Delaware: null,\r\n                Florida: null,\r\n                Georgia: null,\r\n                Hawaii: null,\r\n                Idaho: null,\r\n                Illinois: null,\r\n                Indiana: null,\r\n                Iowa: null,\r\n                Kansas: null,\r\n                Kentucky: null,\r\n                Louisiana: null,\r\n                Maine: null,\r\n                Maryland: null,\r\n                Massachusettes: null,\r\n                Michigan: null,\r\n                Minnesota: null,\r\n                Mississippi: null,\r\n                Missouri: null,\r\n                Montana: null,\r\n                Nebraska: null,\r\n                Nevada: null,\r\n                \"New Hampshire\": null,\r\n                \"New Jersey\": null,\r\n                \"New Mexico\": null,\r\n                \"New York\": null,\r\n                \"North Carolina\": null,\r\n                \"North Dakota\": null,\r\n                Ohio: null,\r\n                Oklahoma: null,\r\n                Oregon: null,\r\n                Pennsylvania: null,\r\n                \"Rhode Island\": null,\r\n                \"South Carolina\": null,\r\n                \"South Dakota\": null,\r\n                Tennessee: null,\r\n                Texas: null,\r\n                Utah: null,\r\n                Vermont: null,\r\n                Virginia: null,\r\n                Washington: null,\r\n                \"West Virginia\": null,\r\n                Wisconsin: null,\r\n                Wyoming: null,\r\n            },\r\n        });\r\n\r\n        if (sh_res.data && !sh_res.loading) {\r\n            setShipping(Number(sh_res.data.getShippingCost));\r\n        }\r\n        let win = window as any;\r\n        try {\r\n            if (!!tmp && tmp.children.length === 0) {\r\n                win.paypal\r\n                    .Buttons({\r\n                        createOrder: async (data, actions) => {\r\n                            let products_str = JSON.stringify(products);\r\n\r\n                            let price = await paypalCheckout({\r\n                                variables: {\r\n                                    products: products_str,\r\n                                    coupon: couponRef.current || \"NONE\",\r\n                                    US_ORDER,\r\n                                },\r\n                            });\r\n\r\n                            if (!price) {\r\n                                return;\r\n                            } else {\r\n                                return actions.order.create({\r\n                                    purchase_units: [\r\n                                        {\r\n                                            description: \"product.description\",\r\n                                            amount: {\r\n                                                currency_code: \"USD\",\r\n                                                value: Number(\r\n                                                    Number(\r\n                                                        price.data\r\n                                                            ?.paypalCheckout\r\n                                                    ) / 100\r\n                                                ).toFixed(2),\r\n                                            },\r\n                                        },\r\n                                    ],\r\n                                });\r\n                            }\r\n                        },\r\n                        onApprove: async (_ppdata, actions) => {\r\n                            const order = await actions.order.capture();\r\n                            let products_str = JSON.stringify(products),\r\n                                purchaseUnits_str = JSON.stringify(\r\n                                    order.purchase_units\r\n                                ),\r\n                                user_id;\r\n                            if (\r\n                                !data ||\r\n                                !data.getCurrUser ||\r\n                                !data.getCurrUser.user_id\r\n                            ) {\r\n                                user_id =\r\n                                    order.purchase_units[0].payee.email_address;\r\n                            } else {\r\n                                user_id = data!.getCurrUser!.user_id!;\r\n                            }\r\n                            // validate order info here paypal order here\r\n                            addPaypalOrder({\r\n                                variables: {\r\n                                    coupon: couponRef.current || \"NONE\",\r\n                                    products: products_str,\r\n                                    purchase_units: purchaseUnits_str,\r\n                                    user_id,\r\n                                    US_ORDER,\r\n                                },\r\n                            });\r\n                            setPaidFor(true);\r\n                        },\r\n                        onError: async err => {\r\n                            console.log(\"err :>> \", err);\r\n                            let products_str = JSON.stringify(products);\r\n                            var price: any = await paypalCheckout({\r\n                                variables: {\r\n                                    products: products_str,\r\n                                    coupon,\r\n                                    US_ORDER,\r\n                                },\r\n                            });\r\n                            setError(price.data.paypalCheckout);\r\n                        },\r\n                    })\r\n                    .render(paypalRef.current);\r\n            } else {\r\n            }\r\n        } catch {\r\n            setError(\"DONT_KNOW\");\r\n        }\r\n    }, [Total, addPaypalOrder, coupon, data, paypalCheckout, products]);\r\n\r\n    if (sh_res.loading) {\r\n        return <> </>;\r\n    }\r\n\r\n    if (!!err) {\r\n        return (\r\n            <div style={{ minHeight: \"70vh\" }}>\r\n                <div\r\n                    className=\"row\"\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                >\r\n                    <h1>Oops this is embarrasing</h1>\r\n                </div>\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"faq-wrapper\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                borderBottom: \" 4px solid black\",\r\n                            }}\r\n                        ></div>\r\n\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            It looks like{\" \"}\r\n                            <span style={{ color: \"rgb(230, 19, 19)\" }}>\r\n                                {err}\r\n                            </span>\r\n                        </h3>\r\n\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            <strong style={{ color: \"#ff0000\" }}>-</strong> If\r\n                            you believe this is an error please contact us via\r\n                            instagram or email.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (paidFor) {\r\n        dispatch(resetCart());\r\n        return <Paid />;\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n        return <Redirect to=\"/my-cart\" />;\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        let payBtn = document.getElementById(\"stripe-pay-btn\")!;\r\n        payBtn.classList.add(\"disabled\");\r\n        const { stripe, elements } = props;\r\n        if (!stripe || !elements) {\r\n            return;\r\n        }\r\n\r\n        const card = elements.getElement(CardElement);\r\n        const result = await stripe.createToken(card);\r\n\r\n        if (result.error) {\r\n            M.toast({ html: `${result.error.message}` });\r\n            console.log(\"result.error :>> \", result.error);\r\n        } else {\r\n            let tmp: any = address;\r\n            tmp.email = address.email;\r\n            let products_str = JSON.stringify(products),\r\n                token_str = JSON.stringify(result.token),\r\n                shipping_str = JSON.stringify(tmp);\r\n\r\n            let user_id;\r\n            if (!data) {\r\n                user_id = \"NONE\";\r\n            } else {\r\n                user_id = data.getCurrUser!.user_id!;\r\n            }\r\n\r\n            let billing_str = \"\";\r\n            if (billing.refresh) {\r\n                billing_str = JSON.stringify(billing);\r\n            } else {\r\n                billing_str = \"NONE\";\r\n            }\r\n\r\n            let response = await checkout({\r\n                variables: {\r\n                    token: token_str,\r\n                    user_id,\r\n                    products: products_str,\r\n                    shipping_info: shipping_str,\r\n                    billing_info: billing_str,\r\n                    coupon,\r\n                },\r\n            });\r\n\r\n            if (!response!.data!.checkout) {\r\n                M.toast({ html: \"Failed to checkout\" });\r\n                M.toast({ html: \"Please double check your details\" });\r\n            } else if (response!.data!.checkout === \"true\") {\r\n                setPaidFor(true);\r\n            } else {\r\n                setError(response.data!.checkout);\r\n            }\r\n        }\r\n        payBtn.classList.remove(\"disabled\");\r\n    };\r\n\r\n    if (subtotal === -1) {\r\n        let tmp_subtotal = 0;\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            let product = products[i];\r\n            if (!product.option || product.option.length === 0) {\r\n                tmp_subtotal += products[i].price * products[i].quantity;\r\n            } else {\r\n                tmp_subtotal += products[i].option_price * products[i].quantity;\r\n            }\r\n        }\r\n\r\n        let tax = Math.round(tmp_subtotal * 0.095);\r\n\r\n        // shipping not added to subtotal bc it isn't rerendered if a coupon is added\r\n        setTotal(tmp_subtotal + tax);\r\n        setSubtotal(tmp_subtotal);\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let tmp_email = address.email;\r\n        if (checkAuth()) {\r\n            tmp_email = \"placeholder\";\r\n        }\r\n\r\n        if (\r\n            !address.name ||\r\n            !tmp_email ||\r\n            !address.line1 ||\r\n            !address.city ||\r\n            !address.zip ||\r\n            !address.state ||\r\n            billing.refresh\r\n        ) {\r\n            if (!tmp_email && document.getElementById(\"email\")) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!address.name) {\r\n                document.getElementById(\"name\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.line1) {\r\n                document.getElementById(\"address\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.city) {\r\n                document.getElementById(\"city\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.zip) {\r\n                document.getElementById(\"zip\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (!address.state) {\r\n                document.getElementById(\"state\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (billing.refresh) {\r\n                if (\r\n                    !billing.name ||\r\n                    !billing.email ||\r\n                    !billing.address.line1 ||\r\n                    !billing.address.city ||\r\n                    !billing.address.zip ||\r\n                    !billing.address.state\r\n                ) {\r\n                    if (!billing.name) {\r\n                        document\r\n                            .getElementById(\"billing_name\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.email) {\r\n                        document\r\n                            .getElementById(\"billing_email\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.line1) {\r\n                        document\r\n                            .getElementById(\"billing_address\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.city) {\r\n                        document\r\n                            .getElementById(\"billing_city\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.zip) {\r\n                        document\r\n                            .getElementById(\"billing_zip\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n\r\n                    if (!billing.address.state) {\r\n                        document\r\n                            .getElementById(\"billing_state\")!\r\n                            .classList.add(\"invalid\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            M.toast({\r\n                html: \"Please fill in the missing data\",\r\n            });\r\n        } else {\r\n            handleSubmit();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"row\"\r\n            style={{ height: \"100%\", margin: \"0\", marginTop: \"64px\" }}\r\n        >\r\n            <div className=\"col s12 m6\">\r\n                <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n                    <div className=\"row\">\r\n                        <a href=\"#/my-cart\">\r\n                            <svg\r\n                                style={{ marginRight: \"8px\" }}\r\n                                focusable=\"false\"\r\n                                width=\"12\"\r\n                                height=\"12\"\r\n                                viewBox=\"0 0 16 16\"\r\n                            >\r\n                                <path\r\n                                    d=\"M3.417 7H15a1 1 0 0 1 0 2H3.417l4.591 4.591a1 1 0 0 1-1.415 1.416l-6.3-6.3a1 1 0 0 1 0-1.414l6.3-6.3A1 1 0 0 1 8.008 2.41z\"\r\n                                    fillRule=\"evenodd\"\r\n                                ></path>\r\n                            </svg>\r\n                            <span>Back To Cart</span>\r\n                        </a>\r\n                    </div>\r\n                    <div>\r\n                        <div\r\n                            className=\"ProductSummary container\"\r\n                            style={{ marginTop: \"32px\" }}\r\n                        >\r\n                            <div\r\n                                className=\"ProductSummary-info\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"rgba(26,26,26,.6)\",\r\n                                        fontWeight: \"bold\",\r\n                                    }}\r\n                                >\r\n                                    Total\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        fontSize: \"36px\",\r\n                                        letterSpacing: \"-.03rem\",\r\n                                        color: \"#303030\",\r\n                                    }}\r\n                                >\r\n                                    $\r\n                                    {Number((Total + shipping) / 100).toFixed(\r\n                                        2\r\n                                    )}\r\n                                    {/* ${Number(Total / 100).toFixed(2)} */}\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        marginTop: \"32px\",\r\n                                        marginBottom: \"32px\",\r\n                                    }}\r\n                                    id=\"Products-summary\"\r\n                                >\r\n                                    {products.map((_val, i) => {\r\n                                        return (\r\n                                            <div\r\n                                                key={i}\r\n                                                className=\"product\"\r\n                                                style={{\r\n                                                    marginBottom: \"16px\",\r\n                                                    display: \"flex\",\r\n                                                    justifyContent:\r\n                                                        \"space-between\",\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    className=\"product-name\"\r\n                                                    style={{\r\n                                                        fontSize: \"16px\",\r\n                                                        fontWeight: 600,\r\n                                                    }}\r\n                                                >\r\n                                                    {products[i].name}{\" \"}\r\n                                                    {!products[i].option ? (\r\n                                                        <></>\r\n                                                    ) : (\r\n                                                        <span className=\"bold\">\r\n                                                            (\r\n                                                            {products[i].option}\r\n                                                            )\r\n                                                        </span>\r\n                                                    )}{\" \"}\r\n                                                    x{products[i].quantity}\r\n                                                </div>\r\n                                                <div\r\n                                                    className=\"product-subtotal\"\r\n                                                    style={{ fontWeight: 390 }}\r\n                                                >\r\n                                                    $\r\n                                                    {!products[i]\r\n                                                        .option_price ? (\r\n                                                        <span>\r\n                                                            {Number(\r\n                                                                (products[i]\r\n                                                                    .price *\r\n                                                                    products[i]\r\n                                                                        .quantity) /\r\n                                                                    100\r\n                                                            ).toFixed(2)}\r\n                                                        </span>\r\n                                                    ) : (\r\n                                                        <span>\r\n                                                            {Number(\r\n                                                                (products[i]\r\n                                                                    .option_price *\r\n                                                                    products[i]\r\n                                                                        .quantity) /\r\n                                                                    100\r\n                                                            ).toFixed(2)}\r\n                                                        </span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                    <div\r\n                                        className=\"subtotal\"\r\n                                        style={{\r\n                                            paddingBottom: \"16px\",\r\n                                            paddingTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Subtotal</span>\r\n                                        <span>\r\n                                            ${Number(subtotal / 100).toFixed(2)}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div\r\n                                        id=\"coupon-applied\"\r\n                                        style={{\r\n                                            display: \"none\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        {shipping === 0 ? (\r\n                                            <></>\r\n                                        ) : (\r\n                                            <>\r\n                                                <span>Coupon Applied</span>\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: \"bold\",\r\n                                                    }}\r\n                                                >\r\n                                                    -\r\n                                                    {Number(\r\n                                                        discountPH / 100\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"row\" id=\"promocode-input\">\r\n                                        <div className=\"col s8\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"PromoCode\"\r\n                                                    type=\"text\"\r\n                                                    className=\"validate\"\r\n                                                    value={coupon}\r\n                                                    onChange={e => {\r\n                                                        setCoupon(\r\n                                                            e.target.value.toLowerCase()\r\n                                                        );\r\n                                                    }}\r\n                                                />\r\n                                                <label htmlFor=\"PromoCode\">\r\n                                                    Add a promotion code\r\n                                                </label>\r\n                                                <span\r\n                                                    id=\"coupon-helper\"\r\n                                                    className=\"helper-text\"\r\n                                                    data-error=\" \"\r\n                                                ></span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col s3\">\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    backgroundColor: \"#0a0a0a\",\r\n                                                    marginTop: \"25px\",\r\n                                                    marginBottom: \"15px\",\r\n                                                }}\r\n                                                onClick={async () => {\r\n                                                    //validate  coupon\r\n                                                    if (coupon.length !== 0) {\r\n                                                        let type = await validateCoupon(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    coupon_name: coupon,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n                                                        if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"INVALID\"\r\n                                                        ) {\r\n                                                            document\r\n                                                                .getElementById(\r\n                                                                    \"PromoCode\"\r\n                                                                )!\r\n                                                                .classList.add(\r\n                                                                    \"invalid\"\r\n                                                                );\r\n\r\n                                                            document.getElementById(\r\n                                                                \"coupon-helper\"\r\n                                                            )!.attributes[\r\n                                                                \"data-error\"\r\n                                                            ].nodeValue = `The coupon you entered(${coupon}) is not valid`;\r\n\r\n                                                            setCoupon(\"\");\r\n                                                        } else if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"FREE_SHIPPING\"\r\n                                                        ) {\r\n                                                            // Handle Free Shipping here\r\n                                                            setShipping(0);\r\n                                                            document.getElementById(\r\n                                                                \"promocode-input\"\r\n                                                            )!.style.display =\r\n                                                                \"none\";\r\n                                                            // replace promo input and submit button with a icon that shows the coupon and discount applied\r\n                                                            document.getElementById(\r\n                                                                \"coupon-applied\"\r\n                                                            )!.style.display =\r\n                                                                \"flex\";\r\n                                                        } else {\r\n                                                            // amount to subtract from subtotal = subtotal * percentage\r\n                                                            let percentage =\r\n                                                                \"0.\" +\r\n                                                                type.data!\r\n                                                                    .validateCoupon;\r\n\r\n                                                            let discount = Math.round(\r\n                                                                subtotal *\r\n                                                                    Number(\r\n                                                                        percentage\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            let tmp = subtotal;\r\n                                                            tmp -= discount;\r\n\r\n                                                            let tax = Math.round(\r\n                                                                tmp * 0.095\r\n                                                            );\r\n\r\n                                                            setTotal(tmp + tax);\r\n                                                            setSubtotal(tmp);\r\n                                                            setDiscountPH(\r\n                                                                discount\r\n                                                            );\r\n\r\n                                                            // hide promo input and submit button\r\n                                                            document.getElementById(\r\n                                                                \"promocode-input\"\r\n                                                            )!.style.display =\r\n                                                                \"none\";\r\n                                                            // replace promo input and submit button with a icon that shows the coupon and discount applied\r\n                                                            document.getElementById(\r\n                                                                \"coupon-applied\"\r\n                                                            )!.style.display =\r\n                                                                \"flex\";\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"8px\",\r\n                                            marginBottom: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Sales Tax</span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            $\r\n                                            {Number(\r\n                                                Math.round(subtotal * 0.095) /\r\n                                                    100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"8px\",\r\n                                            marginBottom: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Shipping </span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            ${Number(shipping / 100).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Total Due</span>\r\n                                        <span>\r\n                                            $\r\n                                            {Number(\r\n                                                (Total + shipping) / 100\r\n                                            ).toFixed(2)}\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"centered\">\r\n                                    <p\r\n                                        onClick={() => {\r\n                                            SET_US_ORDER(false);\r\n                                        }}\r\n                                    >\r\n                                        <label>\r\n                                            <input type=\"checkbox\" />\r\n                                            <span>\r\n                                                This is an international Order\r\n                                            </span>\r\n                                        </label>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"center\",\r\n                                    marginTop: \"32px\",\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{\r\n                                        width: \"85%\",\r\n                                        maxWidth: \"600px\",\r\n                                    }}\r\n                                    ref={paypalRef as any}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col s12 m6 z-depth-3\" style={{ minHeight: \"97vh\" }}>\r\n                <div className=\"container \" style={{}}>\r\n                    {/* <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <h5>Or</h5>\r\n                    </div> */}\r\n\r\n                    <h3>Shipping Information </h3>\r\n                    <h6>\r\n                        <strong style={{ color: \"#ff0000\" }}>*</strong>(US/USD\r\n                        ONLY) Please use Paypal for international orders\r\n                    </h6>\r\n                    <div className=\"centered\">\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                marginTop: 8,\r\n                                marginBottom: 8,\r\n                                borderRadius: \"15px\",\r\n                                borderBottom: \" 4px solid rgb(64, 3, 3)\",\r\n                            }}\r\n                        ></div>\r\n                    </div>\r\n                    {checkAuth() ? (\r\n                        <></>\r\n                    ) : (\r\n                        <div className=\"input-field\">\r\n                            <input\r\n                                id=\"email\"\r\n                                type=\"text\"\r\n                                value={address.email}\r\n                                onChange={e =>\r\n                                    setAddress({\r\n                                        ...address,\r\n                                        email: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <span\r\n                                className=\"helper-text\"\r\n                                data-error=\"Please your email\"\r\n                            ></span>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            value={address.name}\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    name: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your name\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"address\"\r\n                            value={address.line1}\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    line1: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"address\">Address</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your address\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"city\"\r\n                                    value={address.city}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            city: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"city\">City</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your city\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"zip\"\r\n                                    value={address.zip}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            zip: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"zip\">Zip</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your zip\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"state\"\r\n                            value={address.state}\r\n                            className=\"autocomplete\"\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    state: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"state\">State</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please Pick a State\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <p>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id=\"Billing_input\"\r\n                                onClick={() => {\r\n                                    setBilling({\r\n                                        refresh: !billing.refresh,\r\n                                        email: \"\",\r\n                                        name: \"\",\r\n                                        address: {\r\n                                            city: \"\",\r\n                                            line1: \"\",\r\n                                            zip: \"\",\r\n                                            state: \"\",\r\n                                            country: \"\",\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <span>Billing is different from shipping</span>\r\n                        </label>\r\n                    </p>\r\n                    {billing.refresh ? (\r\n                        <>\r\n                            <h2\r\n                                style={{\r\n                                    color: \"rgba(26,26,26,.9)\",\r\n                                    fontWeight: 500,\r\n                                    fontSize: \"16px\",\r\n                                }}\r\n                            >\r\n                                Billing Information\r\n                            </h2>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_email\"\r\n                                    type=\"text\"\r\n                                    value={billing.email}\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            email: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_email\">\r\n                                    Billing Email\r\n                                </label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a your email\"\r\n                                ></span>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_name\"\r\n                                    value={billing.name}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            name: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_name\">Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a your name\"\r\n                                ></span>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_address\"\r\n                                    value={billing.address.line1}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                line1: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_address\">Address</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your address\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_city\"\r\n                                            value={billing.address.city}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        city: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_city\">\r\n                                            City\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter your city\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_zip\"\r\n                                            value={billing.address.zip}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        zip: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_zip\">Zip</label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter your zip\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_state\"\r\n                                    value={billing.address.state}\r\n                                    className=\"autocomplete\"\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                state: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_state\">State</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your state\"\r\n                                ></span>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                    <h2\r\n                        style={{\r\n                            color: \"rgba(26,26,26,.9)\",\r\n                            fontWeight: 500,\r\n                            fontSize: \"16px\",\r\n                        }}\r\n                    >\r\n                        Payment Details\r\n                    </h2>\r\n                    <CardSection />\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn\"\r\n                            id=\"stripe-pay-btn\"\r\n                            onClick={() => {\r\n                                validateForm();\r\n                            }}\r\n                        >\r\n                            Pay ${Number((Total + shipping) / 100).toFixed(2)}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n","import \"../css/faq.scss\";\r\n\r\nconst FAQ = () => {\r\n    var eyeColors = [\r\n        \"rgb(36, 146, 242)\",\r\n        \"rgb(154, 24, 213)\",\r\n        \"#ff0000\",\r\n        \"#000\",\r\n    ];\r\n    let eyeColor = eyeColors[Math.floor(Math.random() * eyeColors.length)];\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>FAQ</h1>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"faq-wrapper\">\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            borderBottom: \" 4px solid #ff0000\",\r\n                        }}\r\n                    ></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>Late Orders</h3>\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - Please be patient as the pandemic has slowed down mail\r\n                        times.\r\n                    </p>\r\n                    <div className=\"divider\"></div>\r\n                    <h3 style={{ fontWeight: 550 }}>Lost or Damaged Items</h3>\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> Please{\" \"}\r\n                        <a href=\"#/contact\"> contact us </a> about any lost or\r\n                        damaged items, and attach your order number.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        -{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            CantRelate.JP\r\n                        </strong>{\" \"}\r\n                        is not responsible for lost or damaged items, if your\r\n                        items have been lost or damaged. Please{\" \"}\r\n                        <a href=\"#/contact\"> contact us </a> .\r\n                    </p>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>\r\n                        Incorrect Shipping Address\r\n                    </h3>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - Please double-check your orders before you place them.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> If wrong\r\n                        address is inputted,{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            please\r\n                            <a href=\"#/contact\"> contact us</a> as soon as\r\n                            possible\r\n                        </strong>\r\n                        . We will do our best to update your order.\r\n                    </p>\r\n\r\n                    <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                        - However{\" \"}\r\n                        <strong style={{ fontWeight: 550 }}>\r\n                            CantRelate.JP\r\n                        </strong>{\" \"}\r\n                        is not responsible for the user's error, and we will not\r\n                        replace the order if it has been shipped.\r\n                    </p>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <h3 style={{ fontWeight: 550 }}>\r\n                        Thank you for checking out Can't Relate.JP!\r\n                    </h3>\r\n\r\n                    <p\r\n                        className=\"flow-text\"\r\n                        style={{\r\n                            fontWeight: 525,\r\n                            marginLeft: \"32px\",\r\n                        }}\r\n                    >\r\n                        <strong style={{ color: \"#ff0000\" }}>-</strong> Happy\r\n                        Shopping! ٩(\r\n                        <strong style={{ color: eyeColor }}>◕</strong>‿\r\n                        <strong style={{ color: eyeColor }}>◕</strong>\r\n                        ｡)۶\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FAQ;\r\n","// import { useState } from \"react\";\r\n// import URI from \"../URI\";\r\nimport \"../css/contact.scss\";\r\nimport {\r\n    FaInstagram,\r\n    FaEnvelope,\r\n    FaTwitter,\r\n    FaFacebookF,\r\n} from \"react-icons/fa\";\r\n// import { useGetCurrUserQuery } from \"../generated/graphql\";\r\n// import axios from \"axios\";\r\n\r\nconst Contact = () => {\r\n    // const { data } = useGetCurrUserQuery();\r\n    // const [name, setName] = useState(\"\");\r\n    // const [email, setEmail] = useState(\"\");\r\n    // const [message, setMessage] = useState(\"\");\r\n    // const [orderNum, setOrderNum] = useState(\"\");\r\n\r\n    // const submitForm = () => {\r\n    //     let tmp_email;\r\n    //     if (!!data) {\r\n    //         tmp_email = data!.getCurrUser.email;\r\n    //     } else {\r\n    //         tmp_email = email;\r\n    //     }\r\n\r\n    //     axios({\r\n    //         method: \"POST\",\r\n    //         url: `${URI}/api/contact`,\r\n    //         data: {\r\n    //             name,\r\n    //             email: tmp_email,\r\n    //             message,\r\n    //             orderNum,\r\n    //         },\r\n    //     }).then((res: any) => {\r\n    //         if (res.data === \"SUCCess\") {\r\n    //             M.toast({ html: \"SUCCessfully sent message.\" });\r\n    //             setName(\"\");\r\n    //             setEmail(\"\");\r\n    //             setMessage(\"\");\r\n    //             setOrderNum(\"\");\r\n    //         } else {\r\n    //             //handle failure\r\n    //             M.toast({ html: \"Failed to send message.\" });\r\n    //             M.toast({ html: \"Please Contact Us via Instagram or Email\" });\r\n    //         }\r\n    //     });\r\n\r\n    //     // fetch(`${URI}/api/contact`, {\r\n    //     //     method: \"POST\",\r\n    //     //     body: JSON.stringify({\r\n    //     //         name,\r\n    //     //         email: tmp_email,\r\n    //     //         message,\r\n    //     //         orderNum,\r\n    //     //     }),\r\n    //     // }).\r\n    // };\r\n\r\n    return (\r\n        <div id=\"contact-form\" className=\"container\">\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>Contact Us</h1>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginBottom: \"10px\",\r\n                }}\r\n            >\r\n                <div className=\"div\">\r\n                    <span>\r\n                        <a\r\n                            href=\"mailto:info.dazzlecrew@gmail.com\"\r\n                            style={{ width: \"300px\" }}\r\n                        >\r\n                            <h6 className=\"bold\">\r\n                                <FaEnvelope\r\n                                    style={{\r\n                                        marginRight: \"5px\",\r\n                                        fontSize: \"20px\",\r\n                                    }}\r\n                                    className=\"left black-text\"\r\n                                />\r\n                                info.dazzlecrew@gmail.com\r\n                            </h6>\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"orderNum\">Order Number</label>\r\n                    </div>\r\n                    <input\r\n                        id=\"orderNum\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={orderNum}\r\n                        onChange={e => setOrderNum(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"message\">Message</label>\r\n                    </div>\r\n                    <textarea\r\n                        id=\"message\"\r\n                        className=\"validate browser-default\"\r\n                        value={message}\r\n                        onChange={e => setMessage(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"w-30\">\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <label htmlFor=\"name\">Your Name</label>\r\n                    </div>\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {checkAuth() ? (\r\n                <></>\r\n            ) : (\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div className=\"w-30\">\r\n                        <div style={{ display: \"flex\" }}>\r\n                            <label className=\" browser-default\" htmlFor=\"email\">\r\n                                Your Email\r\n                            </label>\r\n                        </div>\r\n                        <input\r\n                            id=\"email\"\r\n                            type=\"text\"\r\n                            className=\"validate browser-default\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    style={{ width: \"25%\", marginTop: \"30px\" }}\r\n                    onClick={() => submitForm()}\r\n                >\r\n                    Submit\r\n                </button>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n","import \"../css/spolicy.scss\";\r\n\r\nconst ShippingPolicy = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <h3\r\n                    style={{\r\n                        fontWeight: 550,\r\n                    }}\r\n                >\r\n                    Shipping Policy\r\n                </h3>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        width: \"50%\",\r\n                        borderBottom: \" 4px solid #ff0000\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"divider\"></div>\r\n\r\n                <div className=\"spolicy-wrapper\">\r\n                    <blockquote style={{ borderLeft: \"5px solid black\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>Preorders</h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please allow 2-3 weeks for orders to be processed\r\n                            after pre-orders close.\r\n                        </p>\r\n                    </blockquote>\r\n                    <div className=\"divider\"></div>\r\n                    <blockquote style={{ borderLeft: \"5px solid black\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            Apparel or other specialty items\r\n                        </h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please allow for 3-4 weeks as they are specialty\r\n                            items\r\n                        </p>\r\n                    </blockquote>\r\n                    <div className=\"divider\"></div>\r\n                    <blockquote style={{ borderLeft: \"5px solid #ff0000\" }}>\r\n                        <h3 style={{ fontWeight: 550 }}>\r\n                            Lost or damaged items\r\n                        </h3>\r\n                        <p className=\"flow-text\" style={{ marginLeft: \"32px\" }}>\r\n                            - Please contact via instagram or email.\r\n                        </p>\r\n                    </blockquote>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShippingPolicy;\r\n","const OrderSuccess = () => {\r\n    return <div>Your ordered was SUCCessful</div>;\r\n};\r\n\r\nexport default OrderSuccess;\r\n","import { Redirect } from \"react-router\";\r\nimport {\r\n    useGetSectionsProductsQuery,\r\n    useGetSectionByIdQuery,\r\n} from \"../../generated/graphql\";\r\n\r\nconst GetSection = section_id => {\r\n    const { data, loading } = useGetSectionByIdQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    let sdata = data,\r\n        sloading = loading;\r\n    return { sdata, sloading };\r\n};\r\n\r\nconst ViewSection = () => {\r\n    let section_id = 0;\r\n\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        section_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        section_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const { sdata, sloading } = GetSection(section_id);\r\n    const { data, loading, error } = useGetSectionsProductsQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    if (loading || sloading) {\r\n        return <></>;\r\n    }\r\n\r\n    if (error || !data || !sdata) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1\r\n                className=\"center-align\"\r\n                style={{\r\n                    marginTop: \"60px\",\r\n                    marginBottom: \"60px\",\r\n                    fontWeight: 600,\r\n                }}\r\n            >\r\n                {sdata.getSectionById.name}\r\n            </h1>\r\n\r\n            <div className=\"products-grid\">\r\n                {data.getSectionsProducts.map((_val, i) => {\r\n                    let product = data.getSectionsProducts[i];\r\n                    return (\r\n                        <>\r\n                            <div\r\n                                className=\"card z-depth-0\"\r\n                                style={{\r\n                                    margin: \"0px 8px 32px 8px\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <a\r\n                                    className=\"black-text\"\r\n                                    href={`#/product-details:${product.product_id}`}\r\n                                >\r\n                                    <div className=\"container\">\r\n                                        <div className=\"card-image\">\r\n                                            <img\r\n                                                src={product.images![0].img_url}\r\n                                                alt={product.name}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"card-content\">\r\n                                        <span className=\"card-title\">\r\n                                            <h5 className=\"center-align\">\r\n                                                {product.name}\r\n                                            </h5>\r\n                                        </span>\r\n                                        <span\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <p\r\n                                                className=\"product-price\"\r\n                                                style={{ fontSize: \"16px\" }}\r\n                                            >\r\n                                                $\r\n                                                {Number(\r\n                                                    product.price / 100\r\n                                                ).toFixed(2)}\r\n                                            </p>\r\n                                        </span>\r\n                                    </div>\r\n                                </a>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewSection;\r\n","import { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Products from \"../components/products/Products\";\r\nimport UsersOrders from \"../components/UsersOrders\";\r\nimport ProductDetails from \"../components/products/ProductDetails\";\r\nimport Cart from \"../components/checkout/Cart\";\r\nimport Checkout from \"../components/checkout/Checkout\";\r\nimport { Elements, ElementsConsumer } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport FAQ from \"../components/FAQ\";\r\nimport Contact from \"../components/Contact\";\r\nimport ShippingPolicy from \"../components/ShippingPolicy\";\r\nimport OrderSuccess from \"../components/OrderSuccess\";\r\nimport ViewSection from \"../components/Sections/ViewSection\";\r\n\r\nexport const Routes = () => {\r\n    const stripePromise = loadStripe(\r\n        \"pk_live_51IM63dFngR9vHhwSqY8SvxV2Ze2X07flq8R1TIEIzkXKRzmqPMMzU9Sz0b9crdxdY0NaTjqtkcP9gBf4lebXaX5R00uzQ5fPYw\"\r\n    );\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/products\" render={() => <Products />} />\r\n            <Route\r\n                exact\r\n                path=\"/product-details:id\"\r\n                render={() => <ProductDetails />}\r\n            />\r\n            <Route exact path=\"/my-orders\" render={() => <UsersOrders />} />\r\n            <Route exact path=\"/my-cart\" render={() => <Cart />} />\r\n            <Route\r\n                exact\r\n                path=\"/checkout\"\r\n                render={() => (\r\n                    <Elements stripe={stripePromise}>\r\n                        <ElementsConsumer>\r\n                            {({ stripe, elements }) => (\r\n                                <Checkout stripe={stripe} elements={elements} />\r\n                            )}\r\n                        </ElementsConsumer>\r\n                    </Elements>\r\n                )}\r\n            />\r\n            <Route exact path=\"order-success\" render={() => <OrderSuccess />} />\r\n            <Route\r\n                exact\r\n                path=\"/shipping_policy\"\r\n                render={() => <ShippingPolicy />}\r\n            />\r\n            <Route exact path=\"/FAQ\" render={() => <FAQ />} />\r\n            <Route exact path=\"/contact\" render={() => <Contact />} />\r\n            <Route\r\n                exact\r\n                path=\"/view-section:id\"\r\n                render={() => <ViewSection />}\r\n            />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n","import Navbar from \"./components/navbar/Navbar\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport { Routes } from \"./routes/Routes\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport \"./css/app.scss\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction App() {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n        elems = document.querySelectorAll(\".carousel\");\r\n        M.Carousel.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Navbar />\r\n                <div className=\"contentWrapper\">\r\n                    <Routes />\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import \"../css/Preloader.scss\";\r\nimport anime from \"animejs/lib/anime.es.js\";\r\nimport { useGetMaintenanceQuery } from \"../generated/graphql\";\r\n\r\nconst Preloader = () => {\r\n    anime\r\n        .timeline({\r\n            easing: \"easeInOutSine\",\r\n            duration: 500,\r\n            elasticity: 400,\r\n            loop: true,\r\n        })\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateY: -24,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateY: 24,\r\n            },\r\n            0\r\n        )\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateX: 40,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateX: -40,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-1\", \".circle-3\"],\r\n            translateY: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-2\", \".circle-4\"],\r\n                translateY: 0,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateY: -24,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateY: 24,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateX: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateX: 0,\r\n            },\r\n            \"-= 500\"\r\n        )\r\n        .add({\r\n            targets: [\".circle-2\", \".circle-4\"],\r\n            translateY: 0,\r\n        })\r\n        .add(\r\n            {\r\n                targets: [\".circle-1\", \".circle-3\"],\r\n                translateY: 0,\r\n            },\r\n            \"-= 500\"\r\n        );\r\n\r\n    return (\r\n        <div className=\"loadingWrapper\">\r\n            <div className=\"absolute-center\">\r\n                <div className=\"loader\">\r\n                    <div className=\"circle circle-1\"></div>\r\n                    <div className=\"circle circle-2\"></div>\r\n                    <div className=\"circle circle-3\"></div>\r\n                    <div className=\"circle circle-4\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;\r\n","import { useGetMaintenanceQuery } from \"./generated/graphql\";\r\n\r\nexport const GetMaintenance = () => {\r\n    const { data, loading } = useGetMaintenanceQuery();\r\n\r\n    if (!loading && !!data) {\r\n        let maintenance = data;\r\n        return maintenance;\r\n    }\r\n};\r\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://bean-store-test123.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./App\";\r\nimport Preloader from \"./components/Preloader\";\r\nimport { GetMaintenance } from \"./GetMaintenance\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const maintance = GetMaintenance();\r\n    const [pageLoader, setPageLoader] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        try {\r\n            let tmp = localStorage.getItem(\"iru5\") as string;\r\n            fetch(`${URI}/refresh_token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    refreshToken: tmp,\r\n                },\r\n            }).then(async res => {\r\n                const { accessToken, refreshToken } = await res.json();\r\n                setAccessToken(accessToken);\r\n                localStorage.setItem(\"iru5\", refreshToken);\r\n                setPageLoader(false);\r\n            });\r\n        } catch {\r\n            setPageLoader(false);\r\n        }\r\n\r\n        try {\r\n            // let tmp = localStorage.getItem(\"main_qwf\") as string;\r\n            // fetch(`${URI}/maintenance_login`, {\r\n            //     method: \"POST\",\r\n            //     credentials: \"include\",\r\n            //     headers: {\r\n            //         refreshToken: tmp,\r\n            //     },\r\n            // }).then(async res => {\r\n            //     const { accessToken, refreshToken } = await res.json();\r\n            //     setMainAccessToken(accessToken);\r\n            //     localStorage.setItem(\"main_qwf\", refreshToken);\r\n            //     setMainLoader(false);\r\n            // });\r\n        } catch {}\r\n    }, [setPageLoader]);\r\n\r\n    if (pageLoader || !maintance || maintance.getMaintenance) {\r\n        return <Preloader />;\r\n    } else {\r\n        return <App />;\r\n    }\r\n};\r\n\r\nexport default AppWrapper;\r\n","export interface Product {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n    option?: string;\r\n    option_id?: number;\r\n}\r\n\r\nexport interface ProductInCart {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n    quantity: number;\r\n    option?: string;\r\n    option_id?: number;\r\n}\r\n\r\nexport interface State {\r\n    productsInCart: [\r\n        {\r\n            product_id: number;\r\n            name: string;\r\n            price: number;\r\n            stock: number;\r\n            quantity: number;\r\n            option?: string;\r\n            option_id?: number;\r\n        }\r\n    ];\r\n}\r\n\r\nconst loadState = () => {\r\n    try {\r\n        let serializedState = localStorage.getItem(\"store-state\");\r\n        if (!serializedState) {\r\n            let state = JSON.stringify([]);\r\n            localStorage.setItem(\"store-state\", state);\r\n            return [];\r\n        } else {\r\n            let state = JSON.parse(serializedState);\r\n            return state;\r\n        }\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nconst initState = loadState() || {\r\n    productsInCart: [],\r\n};\r\n\r\ntype Actions = {\r\n    type: string;\r\n    product?: Product;\r\n    newQuantity?: number;\r\n    productIndex?: number;\r\n};\r\n\r\nexport const RootReducer = (state = initState, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"ADD_PRODUCT_TO_CART\": {\r\n            let products = loadState().productsInCart || [];\r\n\r\n            //if product is already in cart increase quantity instead of adding a new product\r\n            for (let i = 0; i < products.length; i++) {\r\n                if (products[i].product_id === action.product!.product_id) {\r\n                    //if product does not have an option\r\n                    if (!!action.product && !action.product.option) {\r\n                        products[i].quantity++;\r\n                        return { ...state, productsInCart: products };\r\n                    } else if (\r\n                        products[i].option_id === action.product!.option_id\r\n                    ) {\r\n                        products[i].quantity++;\r\n                        return { ...state, productsInCart: products };\r\n                    }\r\n                }\r\n            }\r\n\r\n            let newProduct: any = action.product;\r\n            newProduct.quantity = 1;\r\n\r\n            products.push(newProduct);\r\n            return { ...state, productsInCart: products };\r\n        }\r\n\r\n        case \"CHANGE_QUANTITY_ON_PRODUCT\": {\r\n            let productsInCart = state.productsInCart;\r\n            if (action.newQuantity === 0) {\r\n                //remove product if quantity is 0\r\n                productsInCart.splice(action.productIndex!, 1);\r\n            } else {\r\n                productsInCart[\r\n                    action.productIndex!\r\n                ].quantity = action.newQuantity!;\r\n            }\r\n            return { ...state, productsInCart };\r\n        }\r\n\r\n        case \"RESET_CART\": {\r\n            // delete localStorage items\r\n            localStorage.setItem(\"store-state\", \" \");\r\n            // dump state\r\n            return {};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { RootReducer } from \"./RootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst saveState = state => {\r\n    try {\r\n        let serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"store-state\", serializedState);\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nexport const store = createStore(RootReducer as any, composeWithDevTools());\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n});\r\n","import ReactDOM from \"react-dom\";\r\nimport AppWrapper from \"./AppWrapper\";\r\nimport ApolloClient from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { ApolloLink, Observable } from \"apollo-link\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { onError } from \"apollo-link-error\";\r\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\r\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\r\nimport URI from \"./URI\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/ReduxStore\";\r\n\r\nconst cache = new InMemoryCache({});\r\nconst requestLink = new ApolloLink(\r\n    (operation, forward) =>\r\n        new Observable(observer => {\r\n            let handle: any;\r\n            Promise.resolve(operation)\r\n                .then(operation => {\r\n                    const accessToken = getAccessToken();\r\n                    operation.setContext({\r\n                        headers: {\r\n                            authorization: accessToken\r\n                                ? `bearer ${accessToken}`\r\n                                : \"\",\r\n                        },\r\n                    });\r\n                })\r\n                .then(() => {\r\n                    handle = forward(operation).subscribe({\r\n                        next: observer.next.bind(observer),\r\n                        error: observer.error.bind(observer),\r\n                        complete: observer.complete.bind(observer),\r\n                    });\r\n                })\r\n                .catch(observer.error.bind(observer));\r\n\r\n            return () => {\r\n                if (handle) handle.unsubscribe();\r\n            };\r\n        })\r\n);\r\n\r\nconst client = new ApolloClient({\r\n    link: ApolloLink.from([\r\n        new TokenRefreshLink({\r\n            accessTokenField: \"accessToken\",\r\n            isTokenValidOrUndefined: () => {\r\n                const token = getAccessToken();\r\n\r\n                if (!token) {\r\n                    return true;\r\n                }\r\n\r\n                try {\r\n                    const { exp } = jwtDecode(token) as any;\r\n                    if (Date.now() >= exp * 1000) {\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } catch {\r\n                    return false;\r\n                }\r\n            },\r\n            fetchAccessToken: () => {\r\n                return fetch(`${URI}/refresh_token`, {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                });\r\n            },\r\n            handleFetch: (accessToken: string) => {\r\n                setAccessToken(accessToken);\r\n            },\r\n            handleError: (err: any) => {\r\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\r\n                console.error(err);\r\n            },\r\n        }) as any,\r\n        onError(({ graphQLErrors, networkError }) => {\r\n            console.log(graphQLErrors);\r\n            console.log(networkError);\r\n        }),\r\n        requestLink,\r\n        new HttpLink({\r\n            uri: `${URI}/graphql`,\r\n            credentials: \"include\",\r\n        }),\r\n    ]),\r\n    cache,\r\n});\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={client as any}>\r\n        <Provider store={store}>\r\n            <AppWrapper />\r\n        </Provider>\r\n    </ApolloProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}